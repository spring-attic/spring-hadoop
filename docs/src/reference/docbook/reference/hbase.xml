<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"  xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="hbase">

	<title>Working with HBase</title>
	
	<para>SHDP provides basic configuration for <ulink url="http://hbase.apache.org">HBase</ulink> through the <literal>hbase-configuration</literal> namespace element (or its backing 
	<classname>HbaseConfigurationFactoryBean</classname>).</para>
	
	<programlisting language="xml"><![CDATA[<!-- default bean id is 'hbaseConfiguration' that uses the existing 'hadoopCconfiguration' object -->
<hdp:hbase-configuration configuration-ref="hadoopCconfiguration" />]]></programlisting>
	
	<para>The above declaration does more than easily create an HBase configuration object; it will also manage the backing HBase connections: when the application
	context shuts down, so will any HBase connections opened - this behavior can be adjusted through the <literal>stop-proxy</literal> and <literal>delete-connection</literal> attributes:</para>
	
	<programlisting language="xml"><![CDATA[<!-- delete associated connections but do not stop the proxies -->
<hdp:hbase-configuration stop-proxy="false" delete-connection="true">
  foo=bar
  property=value
</hdp:hbase-configuration>]]></programlisting>

    <para>Additionally, one can specify the ZooKeeper port used by the HBase server - this is especially useful when connecting to a remote instance (note one can fully configure HBase including the
    ZooKeeper host and port through properties; the attributes here act as shortcuts for easier declaration):</para>
    
	<programlisting language="xml"><![CDATA[<!-- specify ZooKeeper host/port -->
<hdp:hbase-configuration zk-quorum="${hbase.host}" zk-port="${hbase.port}">]]></programlisting>
    
    <para>Notice that like with the other elements, one can specify additional properties specific to this configuration. In fact <literal>hbase-configuration</literal> provides the same properties
	configuration <literal>knobs</literal> as <link linkend="hadoop:config:properties">hadoop configuration</link>:</para>
	
	<programlisting language="xml"><![CDATA[<hdp:hbase-configuration properties-ref="some-props-bean" properties-location="classpath:/conf/testing/hbase.properties"/>]]></programlisting>	
	
	<section id="hbase:dao">
		<title>Data Access Object (DAO) Support</title>
		
		<para>One of the most popular and powerful feature in Spring Framework is the Data Access Object (or DAO) 
		<ulink url="http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/dao.html">support</ulink>. It makes dealing with data access technologies easy and consistent allowing easy switch
		or interconnection of the aforementioned persistent stores with minimal friction (no worrying about catching exceptions, writing boiler-plate code or handling resource acquisition and disposal). Rather than reiterating
		here the value proposal of the DAO support, we recommend the DAO <ulink url="http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/jdbc.html">section</ulink> in the Spring Framework reference documentation </para>
		
		<para>SHDP provides the same functionality for Apache HBase through its <literal>org.springframework.data.hadoop.hbase</literal> package: an <literal>HbaseTemplate</literal> along with several callbacks
		such as <literal>TableCallback</literal>, <literal>RowMapper</literal> and <literal>ResultsExtractor</literal> that remove the low-level, tedious details for finding the HBase table, run the query, prepare the scanner,
		analyze the results then clean everything up, letting the developer focus on her actual job (users familiar with Spring should find the class/method names quite familiar).
		</para>
		
		<para>At the core of the DAO support lies <literal>HbaseTemplate</literal> - a high-level abstraction for interacting with HBase. The template requires an HBase <link linkend="hbase">configuration</link>, once it's
		set, the template is thread-safe and can be reused across multiple instances at the same time:</para>
		
		<programlisting language="xml"><![CDATA[// default HBase configuration
<hdp:hbase-configuration/>

// wire hbase configuration (using default name 'hbaseConfiguration') into the template 
<bean id="htemplate" class="org.springframework.data.hadoop.hbase.HbaseTemplate" p:configuration-ref="hbaseConfiguration"/>]]></programlisting>
		
		<para>The template provides generic callbacks, for executing logic against the tables or doing result or row extraction, but also
		utility methods (the so-called <emphasis>one-liner</emphasis>s) for common operations.
		
		Below are some examples of how the template usage looks like:
		</para>
		
		<programlisting language="java"><![CDATA[// writing to 'MyTable'
template.execute("MyTable", new TableCallback<Object>() {
  @Override
  public Object doInTable(HTable table) throws Throwable {
    Put p = new Put(Bytes.toBytes("SomeRow"));
    p.add(Bytes.toBytes("SomeColumn"), Bytes.toBytes("SomeQualifier"), Bytes.toBytes("AValue"));
    table.put(p);
    return null;
  }
});]]></programlisting>

	   <programlisting language="java"><![CDATA[// read each row from 'MyTable'
List<String> rows = template.find("MyTable", "SomeColumn", new RowMapper<String>() {
  @Override
  public String mapRow(Result result, int rowNum) throws Exception {
    return result.toString();
  }
}));]]></programlisting>

		<para>The first snippet showcases the generic <literal>TableCallback</literal> - the most generic of the callbacks, it does the table lookup and resource cleanup so that the user code does not have to. 
		Notice the callback signature - any exception thrown by the HBase API is automatically caught, converted to Spring's 
		<ulink url="http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/dao.html#dao-exceptions">DAO exceptions</ulink> and resource clean-up applied transparently.
		The second example, displays the dedicated lookup methods - in this case <literal>find</literal> which, as the name implies, finds all the rows matching the given criteria and allows user code to be executed against each
		of them (typically for doing some sort of type conversion or mapping). If the entire result is required, then one can use <literal>ResultsExtractor</literal> instead of <literal>RowMapper</literal>.</para>
		
		<para>Besides the template, the package offers support for automatically binding HBase table to the current thread through <literal>HbaseInterceptor</literal> and <literal>HbaseSynchronizationManager</literal>.
		That is, each class that performs DAO operations on HBase can be <ulink url="http://static.springsource.org/spring/docs/3.1.x/spring-framework-reference/html/aop.html#aop-schema-advisors"><emphasis>wrapped</emphasis></ulink> 
		by <literal>HbaseInterceptor</literal> so that each table in use, once found, is bound to the thread so any subsequent call to it avoids the lookup. Once the call ends, the table is automatically closed so there is
		no leakage between requests. Please refer to the Javadocs for more information.</para>
	</section>
</chapter>