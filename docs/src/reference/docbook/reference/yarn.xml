<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0"  xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" xml:id="yarn">
  
  <title>Yarn Support</title>

  <para>You've propbably seen a lot of topics around Yarn and next version of
  Hadoop's Map Reduce called <emphasis>MapReduce Version 2</emphasis>.
  Originally Yarn was a component of MapReduce itself created to overcome
  some performance issues in Hadoop's original design. The fundamental idea of
  MapReduce v2 is to split up the two major functionalities of the JobTracker,
  resource management and job scheduling/monitoring, into separate daemons.
  The idea is to have a global <emphasis>Resource Manager</emphasis>
  (RM) and per-application <emphasis>Application Master</emphasis> (AM).
  An application is either a single job in the classical sense of 
  Map-Reduce jobs or a group of jobs.</para>

  <para>Let's take a step back and see how original
  <emphasis>MapReduce Version 1</emphasis> works.
  <emphasis>Job Tracker</emphasis> is a global singleton entity responsible
  for managing resources like per node <emphasis>Task Trackers</emphasis> and
  job life-cycle. <emphasis>Task Tracker</emphasis> is responsible for
  executing tasks from a <emphasis>Job Tracker</emphasis> and periodically
  reporting back the status of the tasks. Naturally there is a much
  more going on behind the scenes but the main point of this is that the
  <emphasis>Job Tracker</emphasis> has always been a bottleneck in terms
  of scalability. This is where Yarn steps in by splitting the load
  away from a global resource management and job tracking into per
  application masters. Global resource manager can then concentrate in
  its main task of handling the management of resources.</para>
  
  <note>Yarn is usually referred as a synonym for
  <emphasis>MapReduce Version 2</emphasis>. This is not exactly true
  and it's easier to understand the relationship between those two
  by saying that <emphasis>MapReduce Version 2</emphasis> is an
  application running on top of <emphasis>Yarn</emphasis>.</note>
  
  <para>As we just mentioned <emphasis>MapReduce Version 2</emphasis>
  is an application running of top of <emphasis>Yarn</emphasis>. It is
  possible to make similar custom <emphasis>Yarn</emphasis> based
  application which have nothing to do with <emphasis>MapReduce</emphasis>.
  <emphasis>Yarn</emphasis> itself doesn't know that it is
  running <emphasis>MapReduce Version 2</emphasis>.
  While there's nothing wrong to do everything from scratch one
  will soon realise that steps to learn how to work with
  <emphasis>Yarn</emphasis> are rather deep. This is where
  Spring Hadoop support for Yarn steps in by trying to make
  things easier so that user could concentrate on his own code
  and not having to worry about framework internals.</para>
  
  <section id="yarn:ns">
  	<title>Using the Spring for Apache Yarn Namespace</title>  	

  	<para>To simplify configuration, SHDP provides a dedicated namespace for
	<emphasis>Yarn</emphasis> components. However, one can opt to configure the beans
  	directly through the usual <literal>&lt;bean&gt;</literal> definition.
	For more information about XML Schema-based configuration in Spring, see 
  	<ulink url="http://docs.spring.io/spring/docs/4.0.x/spring-framework-reference/html/xsd-config.html">this</ulink>
	appendix in the Spring Framework reference documentation.</para>
	  	
  	<para>To use the SHDP namespace, one just needs to import
	it inside the configuration:</para>

    <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:]]><co id="yarn-ns-prefix"/><![CDATA[yarn="]]><co id="yarn-ns-uri"/><![CDATA[http://www.springframework.org/schema/yarn"
  xmlns:]]><co id="yarn-ns-int-prefix"/><![CDATA[yarn-int="]]><co id="yarn-ns-int-uri"/><![CDATA[http://www.springframework.org/schema/yarn/integration"
  xmlns:]]><co id="yarn-ns-batch-prefix"/><![CDATA[yarn-batch="]]><co id="yarn-ns-batch-uri"/><![CDATA[http://www.springframework.org/schema/yarn/batch"
  xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/yarn
    http://www.springframework.org/schema/yarn/spring-yarn.xsd]]><co id="yarn-ns-uri-loc"/><![CDATA[
    http://www.springframework.org/schema/yarn/integration
    http://www.springframework.org/schema/yarn/integration/spring-yarn-integration.xsd]]><co id="yarn-ns-int-uri-loc"/><![CDATA[
    http://www.springframework.org/schema/yarn/batch
    http://www.springframework.org/schema/yarn/batch/spring-yarn-batch.xsd]]><co id="yarn-ns-batch-uri-loc"/><![CDATA[">

  <bean id ... >

  ]]><co id="yarn-ns-example"/><![CDATA[<yarn:configuration ...>
</beans>]]></programlisting>

    <calloutlist>
      <callout arearefs="yarn-ns-prefix">
        <para>Spring for Apache Hadoop Yarn namespace prefix for core package.
        Any name can do but through out the reference documentation, the <literal>yarn</literal>
        will be used.</para>
      </callout>
      <callout arearefs="yarn-ns-uri">
        <para>The namespace URI.</para>
      </callout>
      <callout arearefs="yarn-ns-int-prefix">
        <para>Spring for Apache Hadoop Yarn namespace prefix for integration package.
        Any name can do but through out the reference documentation, the <literal>yarn-int</literal>
        will be used.</para>
      </callout>
      <callout arearefs="yarn-ns-int-uri">
        <para>The namespace URI.</para>
      </callout>
      <callout arearefs="yarn-ns-batch-prefix">
        <para>Spring for Apache Hadoop Yarn namespace prefix for batch package.
        Any name can do but through out the reference documentation, the <literal>yarn-batch</literal>
        will be used.</para>
      </callout>
      <callout arearefs="yarn-ns-batch-uri">
        <para>The namespace URI.</para>
      </callout>
      <callout arearefs="yarn-ns-uri-loc">
        <para>The namespace URI location. Note that even though the location
		points to an external address (which exists and is valid), Spring
		will resolve the schema locally as it is included in the Spring
		for Apache Hadoop Yarn library.</para>
      </callout>
      <callout arearefs="yarn-ns-int-uri-loc">
        <para>The namespace URI location.</para>
      </callout>
      <callout arearefs="yarn-ns-batch-uri-loc">
        <para>The namespace URI location.</para>
      </callout>
      <callout arearefs="yarn-ns-example">
        <para>Declaration example for the Yarn namespace.
		Notice the prefix usage.</para>
      </callout>
    </calloutlist>
 	
 	<para>Once declared, the namespace elements can be declared simply by
	appending the aforementioned prefix. Note that is possible to change
	the default namespace, for example from <literal>&lt;beans&gt;</literal>
	to <literal>&lt;yarn&gt;</literal>. This is useful for configuration
	composed mainly of Hadoop components as it avoids declaring the prefix.
	To achieve this, simply swap the namespace prefix declaration above:</para>
    
    <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/yarn"]]><co id="yarn-def-ns-prefix"/><![CDATA[
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  ]]><co id="yarn-def-ns-beans-prefix"/><![CDATA[xmlns:beans="http://www.springframework.org/schema/beans"
  xsi:schemaLocation="
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/yarn
    http://www.springframework.org/schema/yarn/spring-yarn.xsd">
	    
    ]]><co id="yarn-def-ns-beans-example"/><![CDATA[<beans:bean id ... >
	
    ]]><co id="yarn-def-ns-yarn-example"/><![CDATA[<configuration ...>
	
</beans:beans>]]></programlisting>

    <calloutlist>
      <callout arearefs="yarn-def-ns-prefix">
        <para>The default namespace declaration for this XML file points
		to the Spring for Apache Yarn namespace.</para>
      </callout>
      <callout arearefs="yarn-def-ns-beans-prefix">
        <para>The beans namespace prefix declaration.</para>
      </callout>
      <callout arearefs="yarn-def-ns-beans-example">
        <para>Bean declaration using the <literal>&lt;beans&gt;</literal>
		namespace. Notice the prefix.</para>
      </callout>
      <callout arearefs="yarn-def-ns-yarn-example">
        <para>Bean declaration using the <literal>&lt;yarn&gt;</literal>
		namespace. Notice the <emphasis>lack</emphasis> of prefix
		(as <literal>yarn</literal> is the default namespace).</para>
      </callout>
    </calloutlist>
 			
  </section>

  <section id="yarn:javaconfig">

  	<title>Using the Spring for Apache Yarn JavaConfig</title>  	

   	<para>It is also possible to work without XML configuration and rely on
    Annotation based configuration model. XML and JavaConfig for
    <emphasis>Spring YARN</emphasis> are not full replacement for each
    others but we try to mimic the behaviour as much as we can.</para>

   	<para>We basically rely on two concepts when working with JavaConfig.
    Firstly an annotation <interfacename>@EnableYarn</interfacename> is
    used to activate different parts of a Spring Configuration depending
    on <emphasis>enable</emphasis> attribute. We can enable configuration
    for <emphasis>CONTAINER</emphasis>, <emphasis>APPMASTER</emphasis> or
    <emphasis>CLIENT</emphasis>. Secondly when configuration is enabled
    one can use <classname>SpringYarnConfigurerAdapter</classname> whose
    callback methods can be used to do further configuration for components
    familiar from XML.</para>

   	<programlisting language="java"><![CDATA[
@Configuration
@EnableYarn(enable=Enable.CONTAINER)
public class ContainerConfiguration extends SpringYarnConfigurerAdapter {

  @Override
  public void configure(YarnContainerConfigurer container) throws Exception {
    container
      .containerClass(MultiContextContainer.class);
  }

}
]]></programlisting>

   	<para>In above example we enabled configuration for <emphasis>CONTAINER</emphasis>
    and used <classname>SpringYarnConfigurerAdapter</classname> and its
    <literal>configure</literal> callback method for
    <interfacename>YarnContainerConfigurer</interfacename>. In this method
    we instructed container class to be a <classname>MultiContextContainer</classname>.</para>

   	<programlisting language="java"><![CDATA[
@Configuration
@EnableYarn(enable=Enable.APPMASTER)
public class AppmasterConfiguration extends SpringYarnConfigurerAdapter {

  @Override
  public void configure(YarnAppmasterConfigurer master) throws Exception {
    master
      .withContainerRunner();
  }

}
]]></programlisting>

   	<para>In above example we enabled configuration for <emphasis>APPMASTER</emphasis>
    and because of this a callback method for
    <interfacename>YarnAppmasterConfigurer</interfacename>
    is called automatically.</para>

   	<programlisting language="java"><![CDATA[
@Configuration
@EnableYarn(enable=Enable.CLIENT)
@PropertySource("classpath:hadoop.properties")
public class ClientConfiguration extends SpringYarnConfigurerAdapter {

  @Autowired
  private Environment env;

  @Override
  public void configure(YarnConfigConfigurer config) throws Exception {
    config
      .fileSystemUri(env.getProperty("hd.fs"))
      .resourceManagerAddress(env.getProperty("hd.rm"));
  }

  @Override
  public void configure(YarnClientConfigurer client) throws Exception {
    Properties arguments = new Properties();
    arguments.put("container-count", "4");
    client
      .appName("multi-context-jc")
      .withMasterRunner()
        .contextClass(AppmasterConfiguration.class)
        .arguments(arguments);
}
]]></programlisting>

   	<para>In above example we enabled configuration for <emphasis>CLIENT</emphasis>.
    Here one will get yet another callback for
    <interfacename>YarnClientConfigurer</interfacename>. Additionally this shows
    how a Hadoop configuration can be customized using a callback for
    <interfacename>YarnConfigConfigurer</interfacename>.</para>

  </section>

  <section id="yarn:config">
  
    <title>Configuring Yarn</title>
	
    <para>In order to use Hadoop and Yarn, one needs to first configure it namely by
	creating a <literal>YarnConfiguration</literal> object. The configuration holds
	information about the various parameters of the Yarn system.</para>

    <note>
      <para>Configuration for <literal>&lt;yarn:configuration&gt;</literal> looks
	  very similar than <literal>&lt;hdp:configuration&gt;</literal>. Reason for
	  this is a simple separation for Hadoop's <classname>YarnConfiguration</classname>
	  and <classname>JobConf</classname> classes.</para>
    </note>
	
   	<para>In its simplest form, the configuration definition is a one liner:</para>
   	 
   	<programlisting language="xml"><![CDATA[<yarn:configuration />]]></programlisting>
   	 
   	<para>The declaration above defines a <classname>YarnConfiguration</classname>
	bean (to be precise a factory bean of type <classname>ConfigurationFactoryBean</classname>)
	named, by default, <literal>yarnConfiguration</literal>. The default name
	is used, by conventions, by the other elements that require
	a configuration - this leads to simple and very concise configurations as the 
   	main components can automatically wire themselves up without
	requiring any specific configuration.</para>
   	 
   	<para>For scenarios where the defaults need to be tweaked, one
	can pass in additional configuration files:</para>
   	 
   	<programlisting language="xml"><![CDATA[<yarn:configuration resources="classpath:/custom-site.xml, classpath:/hq-site.xml">]]></programlisting>
   	 
   	<para>In this example, two additional Hadoop configuration
	resources are added to the configuration.</para>
   	 
    <note>
      <para>Note that the configuration makes use of Spring's <ulink
      url="http://docs.spring.io/spring/docs/4.0.x/spring-framework-reference/html/resources.html"><interfacename>Resource</interfacename></ulink>
      abstraction to locate the file. This allows various search patterns
	  to be used, depending on the running environment or the prefix
	  specified(if any) by the value - in this example the classpath is used.</para>
    </note>

    <para>In addition to referencing configuration resources, one can tweak
	Hadoop settings directly through Java <classname>Properties</classname>. 
    This can be quite handy when just a few options need to be changed:</para>
    
    <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:yarn="http://www.springframework.org/schema/yarn"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/yarn http://www.springframework.org/schema/yarn/spring-yarn.xsd">
        
  <yarn:configuration>
    fs.defaultFS=hdfs://localhost:9000
    hadoop.tmp.dir=/tmp/hadoop
    electric=sea
  </yarn:configuration>
</beans>]]></programlisting>

    <para>One can further customize the settings by avoiding the so
	called <emphasis>hard-coded</emphasis> values by externalizing them so they
	can be replaced at runtime, based on the existing
    environment without touching the configuration:</para>
     
    <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:yarn="http://www.springframework.org/schema/yarn"
  xmlns:context="http://www.springframework.org/schema/context"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/yarn http://www.springframework.org/schema/yarn/spring-yarn.xsd">
        
  <yarn:configuration>
    fs.defaultFS=${hd.fs}
    hadoop.tmp.dir=file://${java.io.tmpdir}
    hangar=${number:18}
  </yarn:configuration>
     
  <context:property-placeholder location="classpath:hadoop.properties" />     
</beans>]]></programlisting>
     
    <para>Through Spring's property placeholder <ulink url="http://docs.spring.io/spring/docs/4.0.x/spring-framework-reference/html/beans.html#beans-factory-placeholderconfigurer">support</ulink>, <ulink url="docs.spring.io/spring/docs/4.0.x/spring-framework-reference/html/expressions.html">SpEL</ulink> and the <ulink url="http://spring.io/blog/2011/06/09/spring-framework-3-1-m2-released/">environment 
    abstraction</ulink> (available in Spring 3.1). one can externalize
	environment specific properties from the main code base easing the
	deployment across multiple machines. In the example above, the default
	file system is replaced based on the properties available in
	<literal>hadoop.properties</literal> while the temp dir is determined
	dynamically through <literal>SpEL</literal>. Both approaches offer a lot
	of flexbility in adapting to the running environment - in fact we use this
	approach extensivly in the Spring for Apache Hadoop test suite to cope with
	the differences between the different development boxes and the CI server.</para>
          
    <para>
      <anchor id="yarn:config:properties"/>
      Additionally, external <literal>Properties</literal> files can be loaded, <literal>Properties</literal> beans (typically declared through Spring's <literal>
      <ulink url="http://docs.spring.io/spring/docs/4.0.x/spring-framework-reference/html/xsd-config.html#xsd-config-body-schemas-util-properties">util</ulink></literal> namespace). 
      Along with the nested properties declaration, this allows customized configurations to be easily declared:
    </para>
     
    <programlisting language="xml"><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:yarn="http://www.springframework.org/schema/yarn"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:util="http://www.springframework.org/schema/util"
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
    http://www.springframework.org/schema/yarn http://www.springframework.org/schema/yarn/spring-yarn.xsd">

  <!-- merge the local properties, the props bean and the two properties files -->        
  <yarn:configuration properties-ref="props" properties-location="cfg-1.properties, cfg-2.properties">
    star=chasing
    captain=eo
  </yarn:configuration>
     
  <util:properties id="props" location="props.properties"/>     
</beans>]]></programlisting>
     
    <para>When merging several properties, ones defined locally win. In the example
	above the configuration properties are the primary source, followed by
	the <literal>props</literal> bean followed by the external properties
	file based on their defined order. While it's not typical for a configuration
	to refer to use so many properties, the example showcases the various options available.</para>
	
    <note>For more properties utilities, including using the System as a source or
	fallback, or control over the merging order, consider using Spring's <literal>
    <ulink url="http://docs.spring.io/spring/docs/4.0.x/javadoc-api/org/springframework/beans/factory/config/PropertiesFactoryBean.html">PropertiesFactoryBean</ulink></literal> (which is what Spring for
	Apache Hadoop Yarn and <literal>util:properties</literal> use underneath).</note>
     
    <para><anchor id="yarn:config:inherit"/>It is possible to create configuration
	based on existing ones - this allows one to create dedicated configurations, slightly
	different from the main ones, usable for certain jobs (such as streaming - more
	on that <link linkend="yarn:job:streaming">below</link>). Simply use
	the <literal>configuration-ref</literal> attribute to refer to
	the <emphasis>parent</emphasis> configuration - all its properties
	will be inherited and overridden as specified by the child:</para>

    <programlisting language="xml"><![CDATA[<!-- default name is 'yarnConfiguration' -->
<yarn:configuration>
  fs.defaultFS=${hd.fs}
  hadoop.tmp.dir=file://${java.io.tmpdir}
</yarn:configuration>
     
<yarn:configuration id="custom" configuration-ref="yarnConfiguration">
  fs.defaultFS=${custom.hd.fs}
</yarn:configuration>     

...
]]></programlisting>     

    <para>Make sure though you specify a different name since otherwise, since
	both definitions will have the same name, the Spring container will interpret
	this as being the same definition (and will usually consider the last one found).</para>
          
    <para>Last but not least a reminder that one can mix and match all these
	options to her preference. In general, consider externalizing configuration
	since it allows easier updates without interfering with the application
	configuration. When dealing with multiple, similar configuration use
	configuration <emphasis>composition</emphasis> as it tends to keep the
	definitions concise, in sync and easy to update.</para>




    <table id="yarn:config:configuationflags" pgwide="1" align="center">
        <title><literal>yarn:configuration</literal> attributes</title>
        <tgroup cols="3">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="1*"/>
            <colspec colname="c3" colwidth="4*"/>
            <spanspec spanname="description" namest="c2" nameend="c3" align="center"/>
            <thead>
                <row>
                    <entry>Name</entry>
                    <entry>Values</entry>
                    <entry align="center">Description</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry><literal>configuration-ref</literal></entry>
                    <entry>Bean Reference</entry>
                    <entry>Reference to existing <emphasis>Configuration</emphasis> bean</entry>
                </row>
                <row>
                    <entry><literal>properties-ref</literal></entry>
                    <entry>Bean Reference</entry>
                    <entry>Reference to existing <emphasis>Properties</emphasis> bean</entry>
                </row>
                <row>
                    <entry><literal>properties-location</literal></entry>
                    <entry>Comma delimited list</entry>
                    <entry>List or Spring <emphasis>Resource</emphasis> paths</entry>
                </row>
                <row>
                    <entry><literal>resources</literal></entry>
                    <entry>Comma delimited list</entry>
                    <entry>List or Spring <emphasis>Resource</emphasis> paths</entry>
                </row>
                <row>
                    <entry><literal>fs-uri</literal></entry>
                    <entry>String</entry>
                    <entry>The HDFS filesystem address. Equivalent to
                    <emphasis>fs.defaultFS</emphasis> property.</entry>
                </row>
                <row>
                    <entry><literal>rm-address</literal></entry>
                    <entry>String</entry>
                    <entry>The Yarn Resource manager address. Equivalent to
                    <emphasis>yarn.resourcemanager.address</emphasis> property.</entry>
                </row>
                <row>
                    <entry><literal>scheduler-address</literal></entry>
                    <entry>String</entry>
                    <entry>The Yarn Resource manager scheduler address. Equivalent to
                    <emphasis>yarn.resourcemanager.scheduler.address</emphasis> property.</entry>
                </row>
            </tbody>
        </tgroup>  
    </table>





	
  </section>

  <section id="yarn:localresources">
  
    <title>Local Resources</title>
	
    <para>When <emphasis>Application Master</emphasis> or any other
	<emphasis>Container</emphasis> is run in a hadoop cluster, there
	are usually dependencies to various application and configuration files.
	These files needs to be localized into
	a running <emphasis>Container</emphasis> by making a physical copy.
	Localization is a process where dependent files are copied into node's
	directory structure and thus can be used within the <emphasis>Container</emphasis>
	itself. Yarn itself tries to provide isolation in a way that multiple
	containers and applications would not clash.</para>

    <para>In order to use local resources, one needs to create an implementation
	of <interfacename>ResourceLocalizer</interfacename> interface. In its
	simplest form, resource localizer can be defined as:</para>

    <programlisting language="xml"><![CDATA[<yarn:localresources>
  <yarn:hdfs path="/path/in/hdfs/my.jar"/>
</yarn:localresources>
]]></programlisting>

    <para>The declaration above defines a <interfacename>ResourceLocalizer</interfacename>
	bean (to be precise a factory bean of type 
	<classname>LocalResourcesFactoryBean</classname>) named, by default,
	<emphasis>yarnLocalresources</emphasis>. The default name is used, by
	conventions, by the other elements that require a reference to a
	resource localizer. It's explained later how this reference
	is used when container launch context is defined.</para>

    <para>It is also possible to define path as pattern. This makes it
	easier to pick up all or subset of files from a directory.</para>

    <programlisting language="xml"><![CDATA[<yarn:localresources>
  <yarn:hdfs path="/path/in/hdfs/*.jar"/>
</yarn:localresources>
]]></programlisting>

    <para>Behind the scenes it's not enough to simple have a reference
    to file in a hdfs file system. Yarn itself when localizing resources into
    container needs to do a consistency check for copied files. This is done
    by checking file size and timestamp. This information needs to passed
    to yarn together with a file path. Order to do this the one who
    defines these beans needs to ask this information from hdfs prior to
    sending out resouce localizer request. This kind of behaviour exists to
    make sure that once localization is defined, <emphasis>Container</emphasis> will
    fail fast if dependant files were replaced during the process.</para>

    <para>On default the hdfs base address is coming from a Yarn configuration and
    <interfacename>ResourceLocalizer</interfacename> bean will use configuration named
    <emphasis>yarnLocalresources</emphasis>. If there is a need to use something else
    than the default bean, <emphasis>configuration</emphasis> parameter
    can be used to make a reference to other defined configurations.</para>

    <programlisting language="xml"><![CDATA[<yarn:localresources configuration="yarnConfiguration">
  <yarn:hdfs path="/path/in/hdfs/my.jar"/>
</yarn:localresources>
]]></programlisting>

    <para>For example, client defining a launch context for
    <emphasis>Application Master</emphasis> needs to access dependent hdfs entries.
    Effectively hdfs entry given to resource localizer needs to be
    accessed from a <emphasis>Node Manager</emphasis>.</para>

    <para>Yarn resource localizer is using additional parameters to define entry type
    and visibility. Usage is described below:</para>

    <programlisting language="xml"><![CDATA[<yarn:localresources>
  <yarn:hdfs path="/path/in/hdfs/my.jar" type="FILE" visibility="APPLICATION"/>
</yarn:localresources>
]]></programlisting>

    <para>For convenience it is possible to copy files into hdfs during the
    localization process using a <emphasis>yarn:copy</emphasis> tag. Currently
    base staging directory is <emphasis>/syarn/staging/xx</emphasis> where 
    <emphasis>xx</emphasis> is a unique identifier per application instance.</para>

    <programlisting language="xml"><![CDATA[<yarn:localresources>
  <yarn:copy src="file:/local/path/to/files/*jar" staging="true"/>
  <yarn:hdfs path="/*" staging="true"/>
</yarn:localresources>
]]></programlisting>

    <table id="yarn:localresources:localresourcesflags" pgwide="1" align="center">
        <title><literal>yarn:localresources</literal> attributes</title>
        <tgroup cols="3">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="1*"/>
            <colspec colname="c3" colwidth="4*"/>
            <spanspec spanname="description" namest="c2" nameend="c3" align="center"/>
            <thead>
                <row>
                    <entry>Name</entry>
                    <entry>Values</entry>
                    <entry align="center">Description</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry><literal>configuration</literal></entry>
                    <entry>Bean Reference</entry>
                    <entry>A reference to configuration bean name, default is
                    <emphasis>yarnConfiguration</emphasis></entry>
                </row>
                <row>
                    <entry><literal>type</literal></entry>
                    <entry><literal>ARCHIVE</literal>, <literal>FILE</literal>, <literal>PATTERN</literal></entry>
                    <entry>Global default if not defined in entry level</entry>
                </row>
                <row>
                    <entry><literal>visibility</literal></entry>
                    <entry><literal>PUBLIC</literal>, <literal>PRIVATE</literal>, <literal>APPLICATION</literal></entry>
                    <entry>Global default if not defined in entry level</entry>
                </row>
            </tbody>
        </tgroup>  
    </table>

    <table id="yarn:localresources:hdfsflags" pgwide="1" align="center">
        <title><literal>yarn:hdfs</literal> attributes</title>
        <tgroup cols="3">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="1*"/>
            <colspec colname="c3" colwidth="4*"/>
            <spanspec spanname="description" namest="c2" nameend="c3" align="center"/>
            <thead>
                <row>
                    <entry>Name</entry>
                    <entry>Values</entry>
                    <entry align="center">Description</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry><literal>path</literal></entry>
                    <entry>HDFS Path</entry>
                    <entry>Path in hdfs</entry>
                </row>
                <row>
                    <entry><literal>type</literal></entry>
                    <entry><literal>ARCHIVE</literal>, <literal>FILE</literal>(default), <literal>PATTERN</literal></entry>
                    <entry><literal>ARCHIVE</literal> - automatically unarchived by the Node Manager, <literal>FILE</literal> - regular file, <literal>PATTERN</literal> - hybrid between archive and file.</entry>
                </row>
                <row>
                    <entry><literal>visibility</literal></entry>
                    <entry><literal>PUBLIC</literal>, <literal>PRIVATE</literal>, <literal>APPLICATION</literal>(default)</entry>
                    <entry><literal>PUBLIC</literal> - Shared by all users on the node, <literal>PRIVATE</literal> - Shared among all applications of the <emphasis>same user</emphasis> on the node, <literal>APPLICATION</literal> - Shared only among containers of the <emphasis>same application</emphasis> on the node</entry>
                </row>
                <row>
                    <entry><literal>staging</literal></entry>
                    <entry><literal>true</literal>, <literal>false</literal>(default)</entry>
                    <entry>Internal temporary stagind directory.</entry>
                </row>
            </tbody>
        </tgroup>  
    </table>

    <table id="yarn:localresources:copyflags" pgwide="1" align="center">
        <title><literal>yarn:copy</literal> attributes</title>
        <tgroup cols="3">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="1*"/>
            <colspec colname="c3" colwidth="4*"/>
            <spanspec spanname="description" namest="c2" nameend="c3" align="center"/>
            <thead>
                <row>
                    <entry>Name</entry>
                    <entry>Values</entry>
                    <entry align="center">Description</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry><literal>src</literal></entry>
                    <entry>Copy sources</entry>
                    <entry>Comma delimited list of resource patterns</entry>
                </row>
                <row>
                    <entry><literal>staging</literal></entry>
                    <entry><literal>true</literal>, <literal>false</literal>(default)</entry>
                    <entry>Internal temporary stagind directory.</entry>
                </row>
            </tbody>
        </tgroup>  
    </table>

  </section>

  <section id="yarn:containerenvironment">
    <title>Container Environment</title>

    <para>One central concept in Yarn is to use environment variables
    which then can be read from a container. While it's possible to
    read those variable at any time it is considered bad design if
    one chooce to do so. Spring Yarn will pass variable into application
    before any business methods are executed, which makes things more
    clearly and testing becomes much more easier.</para>

    <programlisting language="xml"><![CDATA[<yarn:environment/>]]></programlisting>	

    <para>The declaration above defines a <interfacename>Map</interfacename>
    bean (to be precise a factory bean of type 
    <classname>EnvironmentFactoryBean</classname>) named, by default,
    <emphasis>yarnEnvironment</emphasis>. The default name is used, by
    conventions, by the other elements that require a reference to a
    environment variables.</para>

    <para>For conveniance it is possible to define a classpath
    entry directly into an environment. Most likely one is about
    to run some java code with libraries so classpath needs to
    be defined anyway.</para>

    <programlisting language="xml"><![CDATA[<yarn:environment include-local-system-env="false">
  <yarn:classpath use-yarn-app-classpath="true" delimiter=":">
    ./*
  </yarn:classpath>
</yarn:environment>]]></programlisting>

    <para>If <emphasis>use-yarn-app-classpath</emphasis> parameter is set to
    <emphasis>true</emphasis>(default value) a default yarn entries will be added to classpath
    automatically. These entries are on default resolved from a normal
    <literal>Hadoop Yarn Configuration</literal> using its
    <emphasis>yarn.application.classpath</emphasis> property or if
    <emphasis>site-yarn-app-classpath</emphasis> has a any content entries
    are resolved from there.</para>

    <note>
      <para>Be carefull if passing environment variables between different systems.
      For example if running a client on Windows and passing variables to
      Application Master running on Linux, execution wrapper in Yarn may
      silently fail.</para>
    </note>

    <table id="yarn:environment:environmentflags" pgwide="1" align="center">
        <title><literal>yarn:environment</literal> attributes</title>
        <tgroup cols="3">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="1*"/>
            <colspec colname="c3" colwidth="4*"/>
            <spanspec spanname="description" namest="c2" nameend="c3" align="center"/>
            <thead>
                <row>
                    <entry>Name</entry>
                    <entry>Values</entry>
                    <entry align="center">Description</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry><literal>include-local-system-env</literal></entry>
                    <entry><literal>true</literal>, <literal>false</literal>(default)</entry>
                    <entry>Defines whether system environment variables are
                    actually added to this bean.</entry>
                </row>
            </tbody>
        </tgroup>  
    </table>

    <table id="yarn:environment:classpathflags" pgwide="1" align="center">
        <title><literal>classpath</literal> attributes</title>
        <tgroup cols="3">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="1*"/>
            <colspec colname="c3" colwidth="4*"/>
            <spanspec spanname="description" namest="c2" nameend="c3" align="center"/>
            <thead>
                <row>
                    <entry>Name</entry>
                    <entry>Values</entry>
                    <entry align="center">Description</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry><literal>use-yarn-app-classpath</literal></entry>
                    <entry><literal>false</literal>(default), <literal>true</literal></entry>
                    <entry>Defines whether default yarn entries are added
                    to classpath.</entry>
                </row>
                <row>
                    <entry><literal>use-mapreduce-app-classpath</literal></entry>
                    <entry><literal>false</literal>(default), <literal>true</literal></entry>
                    <entry>Defines whether default mr entries are added
                    to classpath.</entry>
                </row>
                <row>
                    <entry><literal>site-yarn-app-classpath</literal></entry>
                    <entry>Classpath entries</entry>
                    <entry>Defines a comma delimited list of default yarn
                    application classpath entries.</entry>
                </row>
                <row>
                    <entry><literal>site-mapreduce-app-classpath</literal></entry>
                    <entry>Classpath entries</entry>
                    <entry>Defines a comma delimited list of default mr
                    application classpath entries.</entry>
                </row>
                <row>
                    <entry><literal>delimiter</literal></entry>
                    <entry>Delimiter string, default is ":"</entry>
                    <entry>Defines delimiter used in a classpath string</entry>
                </row>
            </tbody>
        </tgroup>  
    </table>


  </section>

  <section id="yarn:client">

    <title>Application Client</title>

    <para>Client is always your entry point when interacting with
    a Yarn system whether one is about to submit a new application
    instance or just querying <emphasis>Resource Manager</emphasis>
    for running application(s) status.
    Currently support for client is very limited and a simple
    command to start <emphasis>Application Master</emphasis>
    can be defined. If there is just a need to query
    <emphasis>Resource Manager</emphasis>, command
    definition is not needed.</para>

    <programlisting language="xml"><![CDATA[<yarn:client app-name="customAppName">
  <yarn:master-command>
    <![CDATA[
      /usr/local/java/bin/java
      org.springframework.yarn.am.CommandLineAppmasterRunner
      appmaster-context.xml
      yarnAppmaster
      container-count=2
      1><LOG_DIR>/AppMaster.stdout
      2><LOG_DIR>/AppMaster.stderr
    ]]]]><![CDATA[>
  </yarn:master-command>
</yarn:client>]]></programlisting>

    <para>The declaration above defines a <interfacename>YarnClient</interfacename>
    bean (to be precise a factory bean of type 
    <classname>YarnClientFactoryBean</classname>) named, by default,
    <emphasis>yarnClient</emphasis>. It also defines a command launching
    an <emphasis>Application Master</emphasis> using
    <literal>&lt;master-command&gt;</literal> entry which is also a way
    to define the raw commands. If this <emphasis>yarnClient</emphasis>
    instance is used to submit an application, its name would come from
    a <emphasis>app-name</emphasis> attribute.</para>

    <programlisting language="xml"><![CDATA[<yarn:client app-name="customAppName">
  <yarn:master-runner/>
</yarn:client>]]></programlisting>

    <para>For a convinience entry <literal>&lt;master-runner&gt;</literal>
    can be used to define same command entries.</para>

    <programlisting language="xml"><![CDATA[<yarn:client app-name="customAppName">
  <util:properties id="customArguments">
    container-count=2
  </util:properties>
  <yarn:master-runner
    command="java"
    context-file="appmaster-context.xml"
    bean-name="yarnAppmaster"
    arguments="customArguments"
    stdout="<LOG_DIR>/AppMaster.stdout"
    stderr="<LOG_DIR>/AppMaster.stderr" />
</yarn:client>]]></programlisting>     

    <para>All previous three examples are effectively identical from
    Spring Yarn point of view.</para>

    <note>
      <para>The &lt;LOG_DIR&gt; refers to Hadoop's dedicated log directory
      for the running container.</para>
    </note>

    <programlisting language="xml"><![CDATA[<yarn:client app-name="customAppName"
  configuration="customConfiguration"
  resource-localizer="customResources"
  environment="customEnv"
  priority="1"
  virtualcores="2"
  memory="11"
  queue="customqueue">
  <yarn:master-runner/>
</yarn:client>]]></programlisting>     

    <para>If there is a need to change some of the parameters for the
    <emphasis>Application Master</emphasis> submission, <literal>memory</literal>
    and <literal>virtualcores</literal> defines the container settings.
    For submission, <literal>queue</literal> and <literal>priority</literal>
    defines how submission is actually done.</para>

    <table id="yarn:client:clientflags" pgwide="1" align="center">
        <title><literal>yarn:client</literal> attributes</title>
        <tgroup cols="3">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="1*"/>
            <colspec colname="c3" colwidth="4*"/>
            <spanspec spanname="description" namest="c2" nameend="c3" align="center"/>
            <thead>
                <row>
                    <entry>Name</entry>
                    <entry>Values</entry>
                    <entry align="center">Description</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry><literal>app-name</literal></entry>
                    <entry>Name as string, default is empty</entry>
                    <entry>Yarn submitted application name</entry>
                </row>
                <row>
                    <entry><literal>configuration</literal></entry>
                    <entry>Bean Reference</entry>
                    <entry>A reference to configuration bean name, default is
                    <emphasis>yarnConfiguration</emphasis></entry>
                </row>
                <row>
                    <entry><literal>resource-localizer</literal></entry>
                    <entry>Bean Reference</entry>
                    <entry>A reference to resource localizer bean name, default is
                    <emphasis>yarnLocalresources</emphasis></entry>
                </row>
                <row>
                    <entry><literal>environment</literal></entry>
                    <entry>Bean Reference</entry>
                    <entry>A reference to environment bean name, default is
                    <emphasis>yarnEnvironment</emphasis></entry>
                </row>
                <row>
                    <entry><literal>template</literal></entry>
                    <entry>Bean Reference</entry>
                    <entry>A reference to a bean implementing
                    <interfacename>ClientRmOperations</interfacename></entry>
                </row>
                <row>
                    <entry><literal>memory</literal></entry>
                    <entry>Memory as integer, default is "64"</entry>
                    <entry>Amount of memory for appmaster resource</entry>
                </row>
                <row>
                    <entry><literal>virtualcores</literal></entry>
                    <entry>Cores as integer, default is "1"</entry>
                    <entry>Number of appmaster resource virtual cores</entry>
                </row>
                <row>
                    <entry><literal>priority</literal></entry>
                    <entry>Priority as integer, default is "0"</entry>
                    <entry>Submission priority</entry>
                </row>
                <row>
                    <entry><literal>queue</literal></entry>
                    <entry>Queue string, default is "default"</entry>
                    <entry>Submission queue</entry>
                </row>
            </tbody>
        </tgroup>  
    </table>

    <table id="yarn:client:mastercommandflags" pgwide="1" align="center">
        <title><literal>yarn:master-command</literal></title>
        <tgroup cols="3">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="1*"/>
            <colspec colname="c3" colwidth="4*"/>
            <spanspec spanname="description" namest="c2" nameend="c3" align="center"/>
            <thead>
                <row>
                    <entry>Name</entry>
                    <entry>Values</entry>
                    <entry align="center">Description</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry>Entry content</entry>
                    <entry>List of commands</entry>
                    <entry>Commands defined in this entry are aggregated into a single command line</entry>
                </row>
            </tbody>
        </tgroup>  
    </table>

    <table id="yarn:client:masterrunnerflags" pgwide="1" align="center">
        <title><literal>yarn:master-runner</literal> attributes</title>
        <tgroup cols="3">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="1*"/>
            <colspec colname="c3" colwidth="4*"/>
            <spanspec spanname="description" namest="c2" nameend="c3" align="center"/>
            <thead>
                <row>
                    <entry>Name</entry>
                    <entry>Values</entry>
                    <entry align="center">Description</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry><literal>command</literal></entry>
                    <entry>Main command as string, default is "java"</entry>
                    <entry>Command line first entry</entry>
                </row>
                <row>
                    <entry><literal>context-file</literal></entry>
                    <entry>Name of the Spring context file, default is "appmaster-context.xml"</entry>
                    <entry>Command line second entry</entry>
                </row>
                <row>
                    <entry><literal>bean-name</literal></entry>
                    <entry>Name of the Spring bean, default is "yarnAppmaster"</entry>
                    <entry>Command line third entry</entry>
                </row>
                <row>
                    <entry><literal>arguments</literal></entry>
                    <entry>Reference to Java's Properties</entry>
                    <entry>Added to command line parameters as key/value pairs separated by '='</entry>
                </row>
                <row>
                    <entry><literal>stdout</literal></entry>
                    <entry>Stdout, default is "&lt;LOG_DIR&gt;/AppMaster.stdout"</entry>
                    <entry>Appended with 1></entry>
                </row>
                <row>
                    <entry><literal>stderr</literal></entry>
                    <entry>Stderr, default is "&lt;LOG_DIR&gt;/AppMaster.stderr"</entry>
                    <entry>Appended with 2></entry>
                </row>
            </tbody>
        </tgroup>  
    </table>

  </section>

  <section id="yarn:master">

    <title>Application Master</title>

    <para>Application master is responsible for container allocation,
    launching and monitoring.</para>

    <programlisting language="xml"><![CDATA[<yarn:master>
  <yarn:container-allocator virtualcores="1" memory="64" priority="0"/>    
  <yarn:container-launcher username="whoami"/>    
  <yarn:container-command>
    <![CDATA[
      /usr/local/java/bin/java
      org.springframework.yarn.container.CommandLineContainerRunner
      container-context.xml
      1><LOG_DIR>/Container.stdout
      2><LOG_DIR>/Container.stderr
    ]]]]><![CDATA[>
  </yarn:container-command>
</yarn:master>
]]></programlisting>

    <para>The declaration above defines a <interfacename>YarnAppmaster</interfacename>
    bean (to be precise a bean of type 
    <classname>StaticAppmaster</classname>) named, by default,
    <emphasis>yarnAppmaster</emphasis>. It also defines a command launching
    a <emphasis>Container(s)</emphasis> using
    <literal>&lt;container-command&gt;</literal> entry, parameters
    for allocation using <literal>&lt;container-allocator&gt;</literal>
    entry and finally a launcher parameter using
    <literal>&lt;container-launcher&gt;</literal> entry.</para>

    <para>Currently there is a simple implementation of
    <classname>StaticAppmaster</classname> which is able to allocate and
    launch a number of containers. These containers are monitored
    by querying resource manager for container execution completion.</para>

    <programlisting language="xml"><![CDATA[<yarn:master>
  <yarn:container-runner/>
</yarn:master>]]></programlisting>     

    <para>For a convinience entry <literal>&lt;container-runner&gt;</literal>
    can be used to define same command entries.</para>

    <programlisting language="xml"><![CDATA[<yarn:master>
  <util:properties id="customArguments">
    some-argument=myvalue
  </util:properties>
  <yarn:container-runner
    command="java"
    context-file="container-context.xml"
    bean-name="yarnContainer"
    arguments="customArguments"
    stdout="<LOG_DIR>/Container.stdout"
    stderr="<LOG_DIR>/Container.stderr" />
</yarn:master>]]></programlisting>


    <table id="yarn:master:masterflags" pgwide="1" align="center">
        <title><literal>yarn:master</literal> attributes</title>
        <tgroup cols="3">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="1*"/>
            <colspec colname="c3" colwidth="4*"/>
            <spanspec spanname="description" namest="c2" nameend="c3" align="center"/>
            <thead>
                <row>
                    <entry>Name</entry>
                    <entry>Values</entry>
                    <entry align="center">Description</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry><literal>configuration</literal></entry>
                    <entry>Bean Reference</entry>
                    <entry>A reference to configuration bean name, default is
                    <emphasis>yarnConfiguration</emphasis></entry>
                </row>
                <row>
                    <entry><literal>resource-localizer</literal></entry>
                    <entry>Bean Reference</entry>
                    <entry>A reference to resource localizer bean name, default is
                    <emphasis>yarnLocalresources</emphasis></entry>
                </row>
                <row>
                    <entry><literal>environment</literal></entry>
                    <entry>Bean Reference</entry>
                    <entry>A reference to environment bean name, default is
                    <emphasis>yarnEnvironment</emphasis></entry>
                </row>
            </tbody>
        </tgroup>  
    </table>

    <table id="yarn:master:containerallocatorflags" pgwide="1" align="center">
        <title><literal>yarn:container-allocator</literal> attributes</title>
        <tgroup cols="3">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="1*"/>
            <colspec colname="c3" colwidth="4*"/>
            <spanspec spanname="description" namest="c2" nameend="c3" align="center"/>
            <thead>
                <row>
                    <entry>Name</entry>
                    <entry>Values</entry>
                    <entry align="center">Description</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry><literal>virtualcores</literal></entry>
                    <entry>Integer</entry>
                    <entry><emphasis>number of virtual cpu cores</emphasis> of the resource.</entry>
                </row>
                <row>
                    <entry><literal>memory</literal></entry>
                    <entry>Integer, as of MBs.</entry>
                    <entry><emphasis>memory</emphasis> of the resource.</entry>
                </row>
                <row>
                    <entry><literal>priority</literal></entry>
                    <entry>Integer</entry>
                    <entry>Assigned priority of a request.</entry>
                </row>
                <row>
                    <entry><literal>locality</literal></entry>
                    <entry>Boolean</entry>
                    <entry>If set to true indicates that resources are not relaxed.
                    Default is <emphasis>FALSE</emphasis>.</entry>
                </row>
            </tbody>
        </tgroup>
    </table>

    <table id="yarn:master:containerlauncherflags" pgwide="1" align="center">
        <title><literal>yarn:container-launcher</literal> attributes</title>
        <tgroup cols="3">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="1*"/>
            <colspec colname="c3" colwidth="4*"/>
            <spanspec spanname="description" namest="c2" nameend="c3" align="center"/>
            <thead>
                <row>
                    <entry>Name</entry>
                    <entry>Values</entry>
                    <entry align="center">Description</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry><literal>username</literal></entry>
                    <entry>String</entry>
                    <entry>Set the <emphasis>user</emphasis> to whom the
                    container has been allocated.</entry>
                </row>
            </tbody>
        </tgroup>  
    </table>

    <table id="yarn:master::containerrunnerflags" pgwide="1" align="center">
        <title><literal>yarn:container-runner</literal> attributes</title>
        <tgroup cols="3">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="1*"/>
            <colspec colname="c3" colwidth="4*"/>
            <spanspec spanname="description" namest="c2" nameend="c3" align="center"/>
            <thead>
                <row>
                    <entry>Name</entry>
                    <entry>Values</entry>
                    <entry align="center">Description</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry><literal>command</literal></entry>
                    <entry>Main command as string, default is "java"</entry>
                    <entry>Command line first entry</entry>
                </row>
                <row>
                    <entry><literal>context-file</literal></entry>
                    <entry>Name of the Spring context file, default is "container-context.xml"</entry>
                    <entry>Command line second entry</entry>
                </row>
                <row>
                    <entry><literal>bean-name</literal></entry>
                    <entry>Name of the Spring bean, default is "yarnContainer"</entry>
                    <entry>Command line third entry</entry>
                </row>
                <row>
                    <entry><literal>arguments</literal></entry>
                    <entry>Reference to Java's Properties</entry>
                    <entry>Added to command line parameters as key/value pairs separated by '='</entry>
                </row>
                <row>
                    <entry><literal>stdout</literal></entry>
                    <entry>Stdout, default is "&lt;LOG_DIR&gt;/Container.stdout"</entry>
                    <entry>Appended with 1></entry>
                </row>
                <row>
                    <entry><literal>stderr</literal></entry>
                    <entry>Stderr, default is "&lt;LOG_DIR&gt;/Container.stderr"</entry>
                    <entry>Appended with 2></entry>
                </row>
            </tbody>
        </tgroup>  
    </table>

  </section>

  <section id="yarn:container">

    <title>Application Container</title>

    <para>There is very little what Spring Yarn needs
	to know about the Container in terms of its configuration.
	There is a simple contract
	between <classname>org.springframework.yarn.container.CommandLineContainerRunner</classname>
	and a bean it's trying to run on default. Default bean name
	is <emphasis>yarnContainer</emphasis>.</para>
	
	<para>There is a simple interface
	<interfacename>org.springframework.yarn.container.YarnContainer</interfacename>
	which container needs to implement.</para>

    <programlisting language="java"><![CDATA[public interface YarnContainer {
  void run();
  void setEnvironment(Map<String, String> environment);
  void setParameters(Properties parameters);
}]]></programlisting>

    <para>There are few different ways how Container can be defined in Spring
	xml configuration. Natively without using namespaces bean can be defined with
	a correct name:</para>

    <programlisting language="xml"><![CDATA[<bean id="yarnContainer" class="org.springframework.yarn.container.TestContainer">	
]]></programlisting>
		
    <para>Spring Yarn namespace will make it even more simpler. Below example
	just defines class which implements needed interface.</para>

    <programlisting language="xml"><![CDATA[
<yarn:container container-class="org.springframework.yarn.container.TestContainer"/>
]]></programlisting>

    <para>It's possible to make a reference to existing bean. This is 
	usefull if bean cannot be instantiated with default constructor.</para>

    <programlisting language="xml"><![CDATA[
<bean id="testContainer" class="org.springframework.yarn.container.TestContainer"/>
<yarn:container container-ref="testContainer"/>
]]></programlisting>

    <para>It's also possible to inline the bean definition.</para>

    <programlisting language="xml"><![CDATA[
<yarn:container>
  <bean class="org.springframework.yarn.container.TestContainer"/>
</yarn:container>
]]></programlisting>


  </section>

  <section id="yarn:appmasterservices">
 
    <title>Application Master Services</title>

    <para>It is fairly easy to create an application which launches a few
    containers and then leave those to do their tasks. This is pretty much
    what <emphasis>Distributed Shell</emphasis> example application in
    Yarn is doing. In that example a container is configured to run
    a simple shell command and <emphasis>Application Master</emphasis>
    only tracks when containers have finished. If only need from a
    framework is to be able to fire and forget then that's all you need, but
    most likely a real-world Yarn application will need some sort of
    collaboration with <emphasis>Application Master</emphasis>. This 
    communication is initiated either from <emphasis>Application Client</emphasis>
    or <emphasis>Application Container</emphasis>.</para>

    <para>Yarn framework itself doesn't define any kind of general
    communication API for <emphasis>Application Master</emphasis>. 
    There are APIs for communicating with <emphasis>Container Manager</emphasis>
    and <emphasis>Resource Manager</emphasis> which are used on within
    a layer not necessarily exposed to a user. Spring Yarn defines
    a general framework to talk to <emphasis>Application Master</emphasis>
    through an abstraction and currently a JSON based rpc system exists.</para>

    <para>This chapter concentrates on developer concepts to create a custom
    services for <emphasis>Application Master</emphasis>, configuration
    options for built-in services can be found from sections below -  
    <link linkend="yarn:masterservice">Appmaster Service</link> and 
    <link linkend="yarn:masterserviceclient">Appmaster Service Client</link>.</para>

    <section id="yarn:appmasterservicesconcepts">

      <title>Basic Concepts</title>

      <para>Having a communication framework between 
      <emphasis>Application Master</emphasis> and
      <emphasis>Container/Client</emphasis> involves few moving parts.
      Firstly there has to be some sort of service running on an
      <emphasis>Application Master</emphasis>. Secondly user of this
      service needs to know where it is and how to connect to it.
      Thirtly, if not creating these services from scratch, it'd be
      nice if some sort of abstraction already exist.</para>

      <para>Contract for appmaster service is very simple,
      <emphasis>Application Master Service</emphasis> needs to implement
      <interfacename>AppmasterService</interfacename> interface be registered
      with Spring application context. Actual appmaster instance will then
      pick it up from a bean factory.</para>

      <programlisting language="java"><![CDATA[public interface AppmasterService {
  int getPort();
  boolean hasPort();
  String getHost();
}]]></programlisting>

      <para><emphasis>Application Master Service</emphasis> framework
      currently provides integration for services acting as service
      for a <emphasis>Client</emphasis> or a <emphasis>Container</emphasis>.
      Only difference between these two roles is how the <emphasis>Service Client</emphasis>
      gets notified about the address of the service. For the <emphasis>Client</emphasis>
      this information is stored within the Hadoop Yarn resource manager. For the
      <emphasis>Container</emphasis> this information is passed via environment within
      the launch context.</para>

      <programlisting language="xml"><![CDATA[<bean id="yarnAmservice" class="AppmasterServiceImpl" />
<bean id="yarnClientAmservice" class="AppmasterClientServiceImpl" />]]></programlisting>

      <para>Example above shows a default bean names, <emphasis>yarnAmservice</emphasis>
      and <emphasis>yarnClientAmservice</emphasis> respectively recognised by
      Spring Yarn.</para>

      <para>Interface <interfacename>AppmasterServiceClient</interfacename> is
      currently an empty interface just marking class to be
      a appmaster service client.</para>

      <programlisting language="java"><![CDATA[public interface AppmasterServiceClient {
}]]></programlisting>


    </section>

    <section id="yarn:appmasterservicesjson">

      <title>Using JSON</title>

      <para>Default implementations can be used to exchange messages using
      a simple domain classes and actual messages are converted into json
      and send over the transport.</para>


      <programlisting language="xml"><![CDATA[<yarn-int:amservice
  service-impl="org.springframework.yarn.integration.ip.mind.TestService"
  default-port="1234"/>
<yarn-int:amservice-client
  service-impl="org.springframework.yarn.integration.ip.mind.DefaultMindAppmasterServiceClient"
  host="localhost"
  port="1234"/>]]></programlisting>

      <programlisting language="java"><![CDATA[@Autowired
AppmasterServiceClient appmasterServiceClient;

@Test
public void testServiceInterfaces() throws Exception {
  SimpleTestRequest request = new SimpleTestRequest();
  SimpleTestResponse response =
  (SimpleTestResponse) ((MindAppmasterServiceClient)appmasterServiceClient).
    doMindRequest(request);
  assertThat(response.stringField, is("echo:stringFieldValue"));
}]]></programlisting>

    </section>

    <section id="yarn:appmasterservicesconversion">

      <title>Converters</title>

      <para>When default implementations for Application master services are
      exchanging messages, converters are net registered automatically. There
      is a namespace tag <emphasis>converters</emphasis> to ease
      this configuration.</para>

      <programlisting language="xml"><![CDATA[<bean id="mapper" 
  class="org.springframework.yarn.integration.support.Jackson2ObjectMapperFactoryBean" />	

<yarn-int:converter>
  <bean class="org.springframework.yarn.integration.convert.MindObjectToHolderConverter">
    <constructor-arg ref="mapper"/>
  </bean>
</yarn-int:converter>

<yarn-int:converter>
  <bean class="org.springframework.yarn.integration.convert.MindHolderToObjectConverter">
    <constructor-arg ref="mapper"/>
    <constructor-arg value="org.springframework.yarn.batch.repository.bindings"/>
  </bean>
</yarn-int:converter>
]]></programlisting>

    </section>

  </section>



  <section id="yarn:masterservice">

    <title>Application Master Service</title>

    <para>This section of this document is about configuration, more about
    general concepts for see a <xref linkend="yarn:appmasterservices"/>.</para>

    <para>Currently Spring Yarn have support for services using Spring
    Integration tcp channels as a transport.</para>

    <programlisting language="xml"><![CDATA[<bean id="mapper" 
  class="org.springframework.yarn.integration.support.Jackson2ObjectMapperFactoryBean" />

<yarn-int:converter>
  <bean class="org.springframework.yarn.integration.convert.MindObjectToHolderConverter">
    <constructor-arg ref="mapper"/>
  </bean>
</yarn-int:converter>

<yarn-int:converter>
  <bean class="org.springframework.yarn.integration.convert.MindHolderToObjectConverter">
    <constructor-arg ref="mapper"/>
    <constructor-arg value="org.springframework.yarn.integration.ip.mind"/>
  </bean>
</yarn-int:converter>

<yarn-int:amservice
  service-impl="org.springframework.yarn.integration.ip.mind.TestService"/>
]]></programlisting>

    <para>If there is a need to manually configure the server
    side dispatch channel, a little bit more configuration
    is needed.</para>

    <programlisting language="xml"><![CDATA[
<bean id="serializer"
  class="org.springframework.yarn.integration.ip.mind.MindRpcSerializer" />
<bean id="deserializer"
  class="org.springframework.yarn.integration.ip.mind.MindRpcSerializer" />
<bean id="socketSupport"
  class="org.springframework.yarn.integration.support.DefaultPortExposingTcpSocketSupport" />

<ip:tcp-connection-factory id="serverConnectionFactory"
  type="server"
  port="0"
  socket-support="socketSupport"
  serializer="serializer"
  deserializer="deserializer"/>

<ip:tcp-inbound-gateway id="inboundGateway"
  connection-factory="serverConnectionFactory"
  request-channel="serverChannel" />

<int:channel id="serverChannel" />

<yarn-int:amservice
  service-impl="org.springframework.yarn.integration.ip.mind.TestService"
  channel="serverChannel"
  socket-support="socketSupport"/>
]]></programlisting>

    <table id="yarn:masterservice:amserviceflags" pgwide="1" align="center">
        <title><literal>yarn-int:amservice</literal> attributes</title>
        <tgroup cols="3">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="1*"/>
            <colspec colname="c3" colwidth="4*"/>
            <spanspec spanname="description" namest="c2" nameend="c3" align="center"/>
            <thead>
                <row>
                    <entry>Name</entry>
                    <entry>Values</entry>
                    <entry align="center">Description</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry><literal>service-impl</literal></entry>
                    <entry>Class Name</entry>
                    <entry>Full name of the class implementing a service</entry>
                </row>
                <row>
                    <entry><literal>service-ref</literal></entry>
                    <entry>Bean Reference</entry>
                    <entry>Reference to a bean name implementing a service</entry>
                </row>
                <row>
                    <entry><literal>channel</literal></entry>
                    <entry>Spring Int channel</entry>
                    <entry>Custom message dispatching channel</entry>
                </row>
                <row>
                    <entry><literal>socket-support</literal></entry>
                    <entry>Socket support reference</entry>
                    <entry>Custom socket support class</entry>
                </row>
            </tbody>
        </tgroup>  
    </table>


  </section>

  <section id="yarn:masterserviceclient">

    <title>Application Master Service Client</title>

    <para>This section of this document is about configuration, more about
    general concepts for see a <xref linkend="yarn:appmasterservices"/>.</para>

    <para>Currently Spring Yarn have support for services using Spring
    Integration tcp channels as a transport.</para>

    <programlisting language="xml"><![CDATA[<bean id="mapper" 
  class="org.springframework.yarn.integration.support.Jackson2ObjectMapperFactoryBean" />

<yarn-int:converter>
  <bean class="org.springframework.yarn.integration.convert.MindObjectToHolderConverter">
    <constructor-arg ref="mapper"/>
  </bean>
</yarn-int:converter>

<yarn-int:converter>
  <bean class="org.springframework.yarn.integration.convert.MindHolderToObjectConverter">
    <constructor-arg ref="mapper"/>
    <constructor-arg value="org.springframework.yarn.integration.ip.mind"/>
  </bean>
</yarn-int:converter>

<yarn-int:amservice-client
  service-impl="org.springframework.yarn.integration.ip.mind.DefaultMindAppmasterServiceClient"
  host="${SHDP_AMSERVICE_HOST}"
  port="${SHDP_AMSERVICE_PORT}"/>
]]></programlisting>

    <para>If there is a need to manually configure the server
	side dispatch channel, a little bit more configuration
	is needed.</para>

    <programlisting language="xml"><![CDATA[
<bean id="serializer"
  class="org.springframework.yarn.integration.ip.mind.MindRpcSerializer" />
<bean id="deserializer"
  class="org.springframework.yarn.integration.ip.mind.MindRpcSerializer" />

<ip:tcp-connection-factory id="clientConnectionFactory"
  type="client"
  host="localhost"
  port="${SHDP_AMSERVICE_PORT}"
  serializer="serializer"
  deserializer="deserializer"/>

<ip:tcp-outbound-gateway id="outboundGateway"
  connection-factory="clientConnectionFactory"
  request-channel="clientRequestChannel"
  reply-channel="clientResponseChannel" />

<int:channel id="clientRequestChannel" />
<int:channel id="clientResponseChannel" >
  <int:queue />
</int:channel>
		
<yarn-int:amservice-client
  service-impl="org.springframework.yarn.integration.ip.mind.DefaultMindAppmasterServiceClient"
  request-channel="clientRequestChannel"
  response-channel="clientResponseChannel"/>
]]></programlisting>

    <table id="yarn:masterserviceclient:amserviceclientflags" pgwide="1" align="center">
        <title><literal>yarn-int:amservice-client</literal> attributes</title>
        <tgroup cols="3">
            <colspec colname="c1" colwidth="1*"/>
            <colspec colname="c2" colwidth="1*"/>
            <colspec colname="c3" colwidth="4*"/>
            <spanspec spanname="description" namest="c2" nameend="c3" align="center"/>
            <thead>
                <row>
                    <entry>Name</entry>
                    <entry>Values</entry>
                    <entry align="center">Description</entry>
                </row>
            </thead>
            <tbody>
                <row>
                    <entry><literal>service-impl</literal></entry>
                    <entry>Class Name</entry>
                    <entry>Full name of the class implementing a service client</entry>
                </row>
                <row>
                    <entry><literal>host</literal></entry>
                    <entry>Hostname</entry>
                    <entry>Host of the running appmaster service</entry>
                </row>
                <row>
                    <entry><literal>port</literal></entry>
                    <entry>Port</entry>
                    <entry>Port of the running appmaster service</entry>
                </row>
                <row>
                    <entry><literal>request-channel</literal></entry>
                    <entry>Reference to Spring Int request channel</entry>
                    <entry>Custom channel</entry>
                </row>
                <row>
                    <entry><literal>response-channel</literal></entry>
                    <entry>Reference to Spring Int response channel</entry>
                    <entry>Custom channel</entry>
                </row>
            </tbody>
        </tgroup>  
    </table>
	
  </section>
  

  <section id="yarn:batch">

    <title>Using Spring Batch</title>

    <para>In this chapter we assume you are fairly familiar with
    concepts using <emphasis>Spring Batch</emphasis>. Many batch processing problems
    can be solved with single threaded, single process jobs, so it is always a good
    idea to properly check if that meets your needs before thinking about more
    complex implementations. When you are ready to start implementing a job with some
    parallel processing, Spring Batch offers a range of options. At a high level
    there are two modes of parallel processing: single process, multi-threaded;
    and multi-process.</para>

    <para>Spring Hadoop contains a support for running Spring Batch jobs on a
	Hadoop cluster. For better parallel processing Spring Batch partitioned
	steps can be executed on a Hadoop cluster as remote steps.</para>

    <section id="yarn:batchintro">
  
      <title>Batch Jobs</title>
	  
	  <para>Starting point running a <emphasis>Spring Batch Job</emphasis>
	  is always the <emphasis>Application Master</emphasis> whether
	  a job is just simple job with or without partitioning. In case
	  partitioning is not used the whole job would be run within the
	  <emphasis>Application Master</emphasis> and no
	  <emphasis>Containers</emphasis> would be launched. This may seem
	  a bit odd to run something on Hadoop without using
	  <emphasis>Containers</emphasis> but one should remember that
	  <emphasis>Application Master</emphasis> is also just
	  a resource allocated from a Hadoop cluster.</para>

      <para>Order to run Spring Batch jobs on a Hadoop
      cluster, few constraints exists:</para>
	
      <itemizedlist>
        <listitem>
          <para><emphasis>Job Context</emphasis> - Application Master is the main
  	      entry point of running the job.</para>
        </listitem>
        <listitem>
          <para><emphasis>Job Repository</emphasis> - Application Master needs to have
          access to a repository which is located either in-memory or in a database. These
          are the two type natively supported by Spring Batch.</para>
        </listitem>
        <listitem>
  	      <para><emphasis>Remote Steps</emphasis> - Due to nature how Spring Batch
  	      partitioning works, remote step needs an access to a job repository.</para>
        </listitem>
      </itemizedlist>

	  <para>Configuration for Spring Batch Jobs is very similar
      what is needed for normal batch configuration because effectively
      that's what we are doing. Only difference is a way a job is
      launched which in this case is automatically handled by
      <emphasis>Application Master</emphasis>. Implementation of
      a job launching logic is very similar compared to
      <classname>CommandLineJobRunner</classname> found from a
      Spring Batch.</para>

      <programlisting language="xml"><![CDATA[<bean id="transactionManager" class="org.springframework.batch.support.transaction.ResourcelessTransactionManager"/>

<bean id="jobRepository" class="org.springframework.batch.core.repository.support.MapJobRepositoryFactoryBean">
  <property name="transactionManager" ref="transactionManager"/>
</bean>

<bean id="jobLauncher" class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
  <property name="jobRepository" ref="jobRepository"/>
</bean>]]></programlisting>

	  <para>The declaration above define beans for
      <classname>JobRepository</classname> and
      <classname>JobLauncher</classname>. For simplisity
      we used in-memory repository while it would be possible
      to switch into repository working with a database if
      persistence is needed. A bean named <literal>jobLauncher</literal>
      is later used within the <emphasis>Application Master</emphasis>
      to launch jobs.</para>

      <programlisting language="xml"><![CDATA[<bean id="yarnEventPublisher" class="org.springframework.yarn.event.DefaultYarnEventPublisher"/>
	  
<yarn-batch:master/>]]></programlisting>     

	  <para>The declaration above defines <classname>BatchAppmaster</classname>
      bean named, by default, <literal>yarnAppmaster</literal> and 
      <classname>YarnEventPublisher</classname>
      bean named <literal>yarnEventPublisher</literal> which is not
      created automatically.</para>

      <para>Final step to finalize our very simple batch configuration
      is to define the actual batch job.</para>

      <programlisting language="xml"><![CDATA[<bean id="hello" class="org.springframework.yarn.examples.PrintTasklet">
  <property name="message" value="Hello"/>
</bean>

<batch:job id="job">
  <batch:step id="master">
    <batch:tasklet transaction-manager="transactionManager" ref="hello"/>
  </batch:step>
</batch:job>]]></programlisting>     

      <para>The declaration above defines a simple job and tasklet.
      Job is named as <literal>job</literal> which is the default job
      name searched by <emphasis>Application Master</emphasis>. It
      is possible to use different name by changing the launch
      configuration.</para>

      <table id="yarn:batchintro:masterflags" pgwide="1" align="center">
          <title><literal>yarn-batch:master</literal> attributes</title>
          <tgroup cols="3">
              <colspec colname="c1" colwidth="1*"/>
              <colspec colname="c2" colwidth="1*"/>
              <colspec colname="c3" colwidth="4*"/>
              <spanspec spanname="description" namest="c2" nameend="c3" align="center"/>
              <thead>
                  <row>
                      <entry>Name</entry>
                      <entry>Values</entry>
                      <entry align="center">Description</entry>
                  </row>
              </thead>
              <tbody>
                  <row>
                      <entry><literal>configuration</literal></entry>
                      <entry>Bean Reference</entry>
                      <entry>A reference to configuration bean name, default is
                      <emphasis>yarnConfiguration</emphasis></entry>
                  </row>
                  <row>
                      <entry><literal>resource-localizer</literal></entry>
                      <entry>Bean Reference</entry>
                      <entry>A reference to resource localizer bean name, default is
                      <emphasis>yarnLocalresources</emphasis></entry>
                  </row>
                  <row>
                      <entry><literal>environment</literal></entry>
                      <entry>Bean Reference</entry>
                      <entry>A reference to environment bean name, default is
                      <emphasis>yarnEnvironment</emphasis></entry>
                  </row>
                  <row>
                      <entry><literal>job-name</literal></entry>
                      <entry>Bean Name Reference</entry>
                      <entry>A name reference to Spring Batch job, default is
                      <emphasis>job</emphasis></entry>
                  </row>
                  <row>
                      <entry><literal>job-launcher</literal></entry>
                      <entry>Bean Reference</entry>
                      <entry>A reference to job launcher bean name, default is
                      <emphasis>jobLauncher</emphasis>. Target is a normal
                      Spring Batch bean implementing
                      <interfacename>JobLauncher</interfacename>.</entry>
                  </row>
              </tbody>
          </tgroup>
      </table>

    </section>

    <section id="yarn:batchpartitionintro">

      <title>Partitioning</title>

      <para>Let's take a quick look how Spring Batch partitioning is
      handled. Concept of running a partitioned job involves three things,
      <emphasis>Remote steps</emphasis>, <emphasis>Partition Handler</emphasis>
      and a <emphasis>Partitioner</emphasis>. If we do a little bit of
      oversimplification a remote step is like any other step from a user
      point of view. Spring Batch itself does not contain implementations for 
      any proprietary grid or remoting fabrics. Spring Batch does however
      provide a useful implementation of <interfacename>PartitionHandler</interfacename>
      that executes Steps locally in separate threads of execution,
      using the <interfacename>TaskExecutor</interfacename> strategy from Spring.
      Spring Hadoop provides implementation to execute Steps remotely
      on a Hadoop cluster.</para>

      <note>
        <para>For more background information about the Spring
        Batch Partitioning, read the Spring Batch
        reference documentation.</para>
      </note>


      <section id="yarn:batchmasterconfig">

        <title>Configuring Master</title>

        <para>As we previously mentioned a step executed on a remote
        host also need to access a job repository. If job repository would be
        based on a database instance, configuration could be similar on a container
        compared to application master. In our configuration example the job
        repository is in-memory based and remote steps needs access for it.
        Spring Yarn Batch contains implementation of a job repository which
        is able to proxy request via json requests. Order to use that we need
        to enable application client service which is exposing this service.</para>

        <programlisting language="xml"><![CDATA[<bean id="jobRepositoryRemoteService" class="org.springframework.yarn.batch.repository.JobRepositoryRemoteService" >
  <property name="mapJobRepositoryFactoryBean" ref="&amp;jobRepository"/>
</bean>

<bean id="batchService" class="org.springframework.yarn.batch.repository.BatchAppmasterService" >
  <property name="jobRepositoryRemoteService" ref="jobRepositoryRemoteService"/>
</bean>

<yarn-int:amservice service-ref="batchService"/>]]></programlisting>

        <para>he declaration above defines <classname>JobRepositoryRemoteService</classname>
        bean named <literal>jobRepositoryRemoteService</literal> which is then
        connected into <emphasis>Application Master Service</emphasis>
        exposing job repository via Spring Integration Tcp channels.</para>

        <para>As job repository communication messages are
        exchanged via custom json messages, converters needs to be defined.</para>

        <programlisting language="xml"><![CDATA[<bean id="mapper" class="org.springframework.yarn.integration.support.Jackson2ObjectMapperFactoryBean" />

<yarn-int:converter>
  <bean class="org.springframework.yarn.integration.convert.MindObjectToHolderConverter">
    <constructor-arg ref="mapper"/>
  </bean>
</yarn-int:converter>

<yarn-int:converter>
  <bean class="org.springframework.yarn.integration.convert.MindHolderToObjectConverter">
    <constructor-arg ref="mapper"/>
    <constructor-arg value="org.springframework.yarn.batch.repository.bindings"/>
  </bean>
</yarn-int:converter>]]></programlisting>

      </section>

      <section id="yarn:batchcontainerconfig">

        <title>Configuring Container</title>

        <para>Previously we made a choice to use in-memore job repository
        running inside the application master. Now we need to talk to this
        repository via client service. We start by adding same converters as
        in application master.</para>

        <programlisting language="xml"><![CDATA[<bean id="mapper" class="org.springframework.yarn.integration.support.Jackson2ObjectMapperFactoryBean" />

<yarn-int:converter>
  <bean class="org.springframework.yarn.integration.convert.MindObjectToHolderConverter">
    <constructor-arg ref="mapper"/>
  </bean>
</yarn-int:converter>

<yarn-int:converter>
  <bean class="org.springframework.yarn.integration.convert.MindHolderToObjectConverter">
    <constructor-arg ref="mapper"/>
    <constructor-arg value="org.springframework.yarn.batch.repository.bindings"/>
  </bean>
</yarn-int:converter>]]></programlisting>


        <para>We use general client implementation able to communicate
        with a service running on <emphasis>Application Master</emphasis>.</para>

        <programlisting language="xml"><![CDATA[<yarn-int:amservice-client
  service-impl="org.springframework.yarn.integration.ip.mind.DefaultMindAppmasterServiceClient"
  host="${SHDP_AMSERVICE_HOST}"
  port="${SHDP_AMSERVICE_PORT}" />]]></programlisting>

        <para>Remote step is just like any other step.</para>

        <programlisting language="xml"><![CDATA[<bean id="hello" class="org.springframework.yarn.examples.PrintTasklet">
  <property name="message" value="Hello"/>
</bean>

<batch:step id="remoteStep">
  <batch:tasklet transaction-manager="transactionManager" start-limit="100" ref="hello"/>
</batch:step>]]></programlisting>

        <para>We need to have a way to locate the step from an application
        context. For this we can define a step locator which is later
        configured into running container.</para>

        <programlisting language="xml"><![CDATA[<bean id="stepLocator" class="org.springframework.yarn.batch.partition.BeanFactoryStepLocator"/>]]></programlisting>

        <para>Spring Hadoop contains a custom job repository implementation
        which is able to talk back to a remote instance via custom json protocol.</para>

        <programlisting language="xml"><![CDATA[<bean id="transactionManager" class="org.springframework.batch.support.transaction.ResourcelessTransactionManager"/>

<bean id="jobRepository" class="org.springframework.yarn.batch.repository.RemoteJobRepositoryFactoryBean">
  <property name="transactionManager" ref="transactionManager"/>
  <property name="appmasterScOperations" ref="yarnAmserviceClient"/>
</bean>

<bean id="jobExplorer" class="org.springframework.yarn.batch.repository.RemoteJobExplorerFactoryBean">
  <property name="repositoryFactory" ref="&amp;jobRepository" />
</bean>]]></programlisting>

        <para>Finally we define a <emphasis>Container</emphasis> understanding
        how to work with a remote steps.</para>

        <programlisting language="xml"><![CDATA[<bean id="yarnContainer" class="org.springframework.yarn.batch.container.DefaultBatchYarnContainer">
  <property name="stepLocator" ref="stepLocator"/>
  <property name="jobExplorer" ref="jobExplorer"/>
  <property name="integrationServiceClient" ref="yarnAmserviceClient"/>
</bean>]]></programlisting>

      </section>

    </section>

  </section>

  <section id="yarn:boot">

    <title>Using Spring Boot Application Model</title>

    <para>We have additional support for leveraging <emphasis>Spring Boot</emphasis>
    when creating applications using <emphasis>Spring YARN</emphasis>.
    All dependencies for this exists in a sub-module named
    <literal>spring-yarn-boot</literal> which itself depends on
    <emphasis>Spring Boot</emphasis>.</para>

    <para><emphasis>Spring Boot</emphasis> extensions in
    <emphasis>Spring YARN</emphasis> are used to ease following issues:</para>


    <itemizedlist>
      <listitem>
          <para>Create a clear model how application is built,
          packaged and run on <emphasis>Hadoop YARN</emphasis>.</para>
      </listitem>
      <listitem>
          <para>Automatically configure components depending whether we are
          on <emphasis>Client</emphasis>, <emphasis>Appmaster</emphasis>
          or <emphasis>Container</emphasis>.</para>
      </listitem>
      <listitem>
          <para>Create an easy to use externalized configuration model based
          on Boot's <classname>ConfigurationProperties</classname>.</para>
      </listitem>
    </itemizedlist>

    <para>Before we get into details let's go through how simple it is to
    create and deploy a custom application to a Hadoop cluster. Notice that
    there are no need to use XML.</para>

    <programlisting language="java"><![CDATA[
@Configuration
@EnableAutoConfiguration
public class ContainerApplication {

  public static void main(String[] args) {
    SpringApplication.run(ContainerApplication.class, args);
  }

  @Bean
  public HelloPojo helloPojo() {
    return new HelloPojo();
  }

}
]]></programlisting>

    <para>In above <classname>ContainerApplication</classname>, notice how we
    added <interfacename>@Configuration</interfacename> in a class level itself
    and <interfacename>@Bean</interfacename> for a <literal>helloPojo()</literal>
    method.</para>

    <programlisting language="java"><![CDATA[
@YarnContainer
public class HelloPojo {

  private static final Log log = LogFactory.getLog(HelloPojo.class);

  @Autowired
  private Configuration configuration;

  @OnYarnContainerStart
  public void publicVoidNoArgsMethod() {
    log.info("Hello from HelloPojo");
    log.info("About to list from hdfs root content");
    FsShell shell = new FsShell(configuration);
    for (FileStatus s : shell.ls(false, "/")) {
      log.info(s);
    }
  }

}
]]></programlisting>

    <para><classname>HelloPojo</classname> class is a simple POJO in a sense
    that it doesn't extend any <emphasis>Spring YARN</emphasis> base classes.
    What we did in this class:</para>

    <itemizedlist>
      <listitem>
          <para>We've added a class level<interfacename>@YarnContainer</interfacename>
          annotation.</para>
      </listitem>
      <listitem>
          <para>We've added a method level <interfacename>@OnYarnContainerStart</interfacename>
          annotation.</para>
      </listitem>
      <listitem>
          <para>We've <classname>@Autowired</classname> a Hadoop's Configuration class.</para>
      </listitem>
    </itemizedlist>

    <para>To demonstrate that we actually have some real functionality in this class,
    we simply use Spring Hadoop's <classname>FsShell</classname> to list entries from
    a root of a HDFS file system. For this we need to have access to Hadoop's
    Configuration which is prepared for you so that you can just autowire it.</para>

    <programlisting language="java"><![CDATA[
@EnableAutoConfiguration
public class ClientApplication {

  public static void main(String[] args) {
    SpringApplication.run(ClientApplication.class, args)
      .getBean(YarnClient.class)
      .submitApplication();
  }

}
]]></programlisting>

    <itemizedlist>
      <listitem>
          <para><interfacename>@EnableAutoConfiguration</interfacename> tells Spring Boot to
          start adding beans based on classpath setting, other beans,
          and various property settings.</para>
      </listitem>
      <listitem>
          <para>Specific auto-configuration for Spring YARN components takes
          place since Spring YARN is on the classpath.</para>
      </listitem>
    </itemizedlist>

    <para>The <literal>main()</literal> method uses Spring Boot's
    <literal>SpringApplication.run()</literal> method to launch an application. From
    there we simply request a bean of type <interfacename>YarnClient</interfacename> and
    execute its <literal>submitApplication()</literal> method. What happens next depends
    on application configuration, which we go through later in this document.</para>

    <programlisting language="java"><![CDATA[
@EnableAutoConfiguration
public class AppmasterApplication {

  public static void main(String[] args) {
    SpringApplication.run(AppmasterApplication.class, args);
  }

}
]]></programlisting>

    <para>Application class for <interfacename>YarnAppmaster</interfacename> looks even
    simpler than what we just did for <classname>ClientApplication</classname>.
    Again the <literal>main()</literal> method uses Spring Boot's
    <literal>SpringApplication.run()</literal> method to launch an application.</para>

    <para>In real life, you most likely need to start adding more custom
    functionality to your application component and you'd do that by start adding more beans.
    To do that you need to define a Spring <interfacename>@Configuration</interfacename>
    or <interfacename>@ComponentScan</interfacename>. AppmasterApplication would
    then act as your main starting point to define more custom functionality.</para>

    <programlisting language="text"><![CDATA[
spring:
  hadoop:
    fsUri: hdfs://localhost:8020
    resourceManagerHost: localhost
  yarn:
    appName: yarn-boot-simple
    applicationDir: /app/yarn-boot-simple/
    client:
      files:
       - "file:build/libs/yarn-boot-simple-container-0.1.0.jar"
       - "file:build/libs/yarn-boot-simple-appmaster-0.1.0.jar"
      launchcontext:
        archiveFile: yarn-boot-simple-appmaster-0.1.0.jar
    appmaster:
      containerCount: 1
      launchcontext:
        archiveFile: yarn-boot-simple-container-0.1.0.jar
]]></programlisting>

    <para>Final part for your application is its runtime configuration which glues
    all the components together which then can be called as a Spring YARN application.
    This configuration act as source for Spring Boot's
    <interfacename>@ConfigurationProperties</interfacename> and contains relevant
    configuration properties which cannot be auto-discovered or otherwise needs
    to have an option to be overwritten by an end user.</para>

    <para>You can then write your own defaults for your own environment. Because these
    <interfacename>@ConfigurationProperties</interfacename> are resolved at runtime by
    Spring Boot, you even have an easy option to overwrite these properties either
    by using command-line options or provide additional configuration property files.</para>

    <section id="yarn:bootautoconfig">
      <title>Auto Configuration</title>
      <para><emphasis>Spring Boot</emphasis> is heavily influenced by
      auto-configuration trying to predict what user wants to do. These
      decisions are based on configuration properties, what's currently
      available from a classpath and generally everything what auto-configurers
      are able to see.</para>
      <para>Auto-configuration is able to see if it's currently
      running on a YARN cluster and can also differentiate between
      <emphasis>YarnContainer</emphasis> and
      <emphasis>YarnAppmaster</emphasis>. Parts of the auto-configuration
      which cannot be automatically detected are guarded by a flags
      in configuration properties which then allows end-user to either
      enable or disable these functionalities.</para>
    </section>

    <section id="yarn:bootappfiles">
      <title>Application Files</title>
      <para>As we already mentioned <emphasis>Spring Boot</emphasis> creates
      a clear model how you would work with your application files. Most likely
      what you need in your application is jar or zip file(s) having needed
      application code and optional configuration properties to customize
      the application logic. Customization via an external properties files
      makes it easier to change application functionality and reduce a need
      to hard-code application logic.</para>

      <para>Running an application on YARN needs an instance of
      <emphasis>YarnAppmaster</emphasis> and instances of
      <emphasis>YarnContainer</emphasis>s. Both of these containers
      will need a set of files and instructions how to execute a
      container. Based on auto-configuration and configuration
      properties we will make few assumptions how a container
      is executed.</para>

      <para>We are fundamentally supporting three different type of
      combinations:</para>

      <itemizedlist>
        <listitem>
          <para>If a container main archive file is a jar file we expect
          it to be packaged with Boot and be self container
          executable jar archive.</para>
        </listitem>
        <listitem>
          <para>If a container main archive is a zip file we expect
          it to be packages with Boot. In this case we use a special
          runner which knows how to run this exploded archive.</para>
        </listitem>
        <listitem>
          <para>User defines a main class to be run and everything
          this class will need is already setup.</para>
        </listitem>
      </itemizedlist>

      <para>More detailed functionality can be found from a below
      sections; <xref linkend="yarn:bootclasspath"/>,
      <xref linkend="yarn:bootrunners"/> and
      <xref linkend="yarn:bootconfigprops"/>.</para>

    </section>

    <section id="yarn:bootclasspath">
      <title>Application Classpath</title>
      <para>Let's go through as an examples how a classpath
      is configured on different use cases.</para>

      <section>
        <title>Simple Executable Jar</title>
        <para>Running a container using an executable jar archive
        is the most simple scenario due to classpath limitation
        imposed by a JVM. Everything needed for the classpath
        needs to be inside the archive itself. Boot plugins
        for maven and gradle will greatly help to package all
        library dependencies into this archive.</para>

        <programlisting language="text"><![CDATA[
spring:
  yarn:
    client:
      launchcontext:
        archiveFile: yarn-boot-appmaster-0.1.0.jar
    appmaster:
      launchcontext:
        archiveFile: yarn-boot-container-0.1.0.jar
]]></programlisting>

      </section>

      <section>
        <title>Simple Zip Archive</title>
        <para>Using a zip archive is basically needed in two use
        cases. In first case you want to re-use existing libraries
        in YARN cluster for your classpath. In second case you
        want to add custom classpath entries from an exploded
        zip archive.</para>

        <programlisting language="text"><![CDATA[
spring:
  yarn:
    siteYarnAppClasspath: "/path/to/hadoop/libs/*"
    appmaster:
      launchcontext:
        useYarnAppClasspath: true
        archiveFile: yarn-boot-container-0.1.0.zip
]]></programlisting>

        <para>In above example you can have a zip archive which
        doesn't bundle all dependant Hadoop YARN libraries. Default
        classpath entries are then resolved from
        <literal>siteYarnAppClasspath</literal> property.</para>

        <programlisting language="text"><![CDATA[
spring:
  yarn:
    appmaster:
      launchcontext:
        archiveFile: yarn-boot-container-0.1.0.zip
        containerAppClasspath:
         - "./yarn-boot-container-0.1.0.zip/config"
         - "./yarn-boot-container-0.1.0.zip/lib"
]]></programlisting>

        <para>In above example you needed to use custom classpath
        entries from an exploded zip archive.</para>

      </section>

    </section>

    <section id="yarn:bootrunners">
      <title>Container Runners</title>
      <para>Using a propertys
      <literal>spring.yarn.client.launchcontext.archiveFile</literal> and
      <literal>spring.yarn.appmaster.launchcontext.archiveFile</literal>
      respectively, will indicate that container is run based on an archive
      file and Boot runners are used. These runner classes are either used
      manually when constructing an actual raw command for container or
      internally within an executable jar archive.</para>

      <para>However there are times when you may need to work on much
      lower level. Maybe you are having trouble using an executable
      jar archive or Boot runner is not enough what you want to do.
      For this use case you would use propertys
      <literal>spring.yarn.client.launchcontext.runnerClass</literal> and
      <literal>spring.yarn.appmaster.launchcontext.runnerClass</literal>.
      </para>

      <section>
        <title>Custom Runner</title>

        <programlisting language="text"><![CDATA[
spring:
  yarn:
    appmaster:
      launchcontext:
        runnerClass: com.example.MyMainClazz
]]></programlisting>

      </section>

    </section>

    <section id="yarn:bootresourcelocalizer">
      <title>Resource Localizing</title>
      <para>Order for containers to use application files, a YARN resource
      localization process needs to do its tasks. We have a few configuration
      properties which are used to determine which files are actually
      localized into container's working directory. </para>

        <programlisting language="text"><![CDATA[
spring:
  yarn:
    client:
      localizer:
        patterns:
         - "*appmaster*jar"
         - "*appmaster*zip"
        zipPattern: "*zip"
        propertiesNames: [application]
        propertiesSuffixes: [properties, yml]
    appmaster:
      localizer:
        patterns:
         - "*container*jar"
         - "*container*zip"
        zipPattern: "*zip"
        propertiesNames: [application]
        propertiesSuffixes: [properties, yml]
]]></programlisting>

      <para>Above is an example which equals a default functionality
      when localized resources are chosen. For example for a container
      we automatically choose all files matching a simple patterns
      <literal>*container*jar</literal> and <literal>*container*zip</literal>.
      Additionally we choose configuration properties files matching names
      <literal>application.properties</literal> and <literal>application.yml</literal>.
      Property <emphasis>zipPattern</emphasis> is used as an pattern to
      instruct YARN resource localizer to triet file as an archive to be
      automatically exploded.</para>

      <para>If for some reason the default functionality and how
      it can be configured via configuration properties is not
      suiteable, one can define a custom bean to change how
      things work. Interface <interfacename>LocalResourcesSelector</interfacename>
      is used to find localized resources.</para>

      <programlisting language="java"><![CDATA[
public interface LocalResourcesSelector {
  List<Entry> select(String dir);
}
]]></programlisting>

      <para>Below you see a logic how a default
      <classname>BootLocalResourcesSelector</classname> is created 
      during the auto-configuration. You would then create a custom
      implementation and create it as a bean in your Configuration
      class. You would not need to use any Conditionals but not
      how in auto-configuration we use <classname>@ConditionalOnMissingBean</classname>
      to check if user have already created his own implementation.</para>

      <programlisting language="java"><![CDATA[
@Configuration
@EnableConfigurationProperties({ SpringYarnAppmasterLocalizerProperties.class })
public static class LocalResourcesSelectorConfig {

  @Autowired
  private SpringYarnAppmasterLocalizerProperties syalp;

  @Bean
  @ConditionalOnMissingBean(LocalResourcesSelector.class)
  public LocalResourcesSelector localResourcesSelector() {
    BootLocalResourcesSelector selector = new BootLocalResourcesSelector(Mode.CONTAINER);
    if (StringUtils.hasText(syalp.getZipPattern())) {
      selector.setZipArchivePattern(syalp.getZipPattern());
    }
    if (syalp.getPropertiesNames() != null) {
      selector.setPropertiesNames(syalp.getPropertiesNames());
    }
    if (syalp.getPropertiesSuffixes() != null) {
      selector.setPropertiesSuffixes(syalp.getPropertiesSuffixes());
    }
    selector.addPatterns(syalp.getPatterns());
    return selector;
  }
}
]]></programlisting>

    <para>Your configuration could then look like:</para>

    <programlisting language="java"><![CDATA[
@EnableAutoConfiguration
public class AppmasterApplication {

  @Bean
  public LocalResourcesSelector localResourcesSelector() {
    return MyLocalResourcesSelector();
  }

  public static void main(String[] args) {
    SpringApplication.run(AppmasterApplication.class, args);
  }

}
]]></programlisting>

    </section>

    <section id="yarn:bootpojo">
      <title>Container as POJO</title>
      <para>In Boot application model if <emphasis>YarnContainer</emphasis> is
      not explicitly defined it defaults to <classname>DefaultYarnContainer</classname>
      which expects to find a <literal>POJO</literal> created as a bean
      having a specific annotations instructing the actual functionality.</para>

      <para><interfacename>@YarnContainer</interfacename> is a stereotype annotation itself
      having a Spring's <interfacename>@Component</interfacename> defined in it. This is
      automatically marking a class to be a candidate having
      a <interfacename>@YarnContainer</interfacename> functionality.</para>

      <para>Within a <literal>POJO</literal> class we can use
      <interfacename>@OnYarnContainerStart</interfacename> annotation to mark a public
      method to act as an activator for a method endpoint.</para>

     <programlisting language="java"><![CDATA[
@OnYarnContainerStart
public void publicVoidNoArgsMethod() {
}
]]></programlisting>

      <para>Returning type of <literal>int</literal> participates
      in a <emphasis>YarnContainer</emphasis> exit value.</para>

      <programlisting language="java"><![CDATA[
@OnYarnContainerStart
public int publicIntNoArgsMethod() {
  return 0;
}
]]></programlisting>

      <para>Returning type of <literal>boolean</literal> participates
      in a <emphasis>YarnContainer</emphasis> exit value where
      <emphasis>true</emphasis> would mean complete and
      <emphasis>false</emphasis> failed container.</para>

  <programlisting language="java"><![CDATA[
@OnYarnContainerStart
public boolean publicBooleanNoArgsMethod() {
  return true;
}
]]></programlisting>

      <para>Returning type of <literal>String</literal> participates
      in a <emphasis>YarnContainer</emphasis> exit value by matching
      <classname>ExitStatus</classname> and getting exit value
      from <interfacename>ExitCodeMapper</interfacename>.</para>

      <programlisting language="java"><![CDATA[
@OnYarnContainerStart
public String publicVoidNoArgsMethod() {
  return "COMPLETE";
}
]]></programlisting>

      <para>If method throws any <classname>Exception</classname>
      <emphasis>YarnContainer</emphasis> is marked as failed.</para>

      <programlisting language="java"><![CDATA[
@OnYarnContainerStart
public void publicThrowsException() {
  throw new RuntimeExection("My Error");
}
]]></programlisting>

      <para>Method parameter can be bound with
      <interfacename>@YarnEnvironments</interfacename> to get access
      to current <emphasis>YarnContainer</emphasis> environment
      variables.</para>

      <programlisting language="java"><![CDATA[
@OnYarnContainerStart
public void publicVoidNoArgsMethod(@YarnEnvironments Map<String,String> env) {
}
]]></programlisting>

      <para>Method parameter can be bound with
      <interfacename>@YarnEnvironment</interfacename> to get access
      to specific <emphasis>YarnContainer</emphasis> environment
      variable.</para>

      <programlisting language="java"><![CDATA[
@OnYarnContainerStart
public void publicVoidNoArgsMethod(@YarnEnvironment("key") String value) {
}
]]></programlisting>

      <para>Method parameter can be bound with
      <interfacename>@YarnParameters</interfacename> to get access
      to current <emphasis>YarnContainer</emphasis> arguments.</para>

      <programlisting language="java"><![CDATA[
@OnYarnContainerStart
public void publicVoidNoArgsMethod(@YarnParameters Properties properties) {
}
]]></programlisting>

      <para>Method parameter can be bound with
      <interfacename>@YarnParameter</interfacename> to get access
      to a specific <emphasis>YarnContainer</emphasis> arguments.</para>

      <programlisting language="java"><![CDATA[
@OnYarnContainerStart
public void publicVoidNoArgsMethod(@YarnParameter("key") String value) {
}
]]></programlisting>


    </section>

    <section id="yarn:bootconfigprops">

      <title>Configuration Properties</title>

      <para>Configuration properties can be defined using various methods.
      See a Spring Boot dodumentation for details.</para>

      <table id="yarn:boot:configpropsspringhadoop" pgwide="1" align="center">
          <title><literal>spring.hadoop</literal> configuration properties</title>
          <tgroup cols="4">
              <colspec colname="c1" colwidth="2*" align="left"/>
              <colspec colname="c2" colwidth="1*"/>
              <colspec colname="c3" colwidth="1*"/>
              <colspec colname="c4" colwidth="1*"/>
              <thead>
                  <row>
                      <entry>Property Name</entry>
                      <entry>Required</entry>
                      <entry>Type</entry>
                      <entry>Default Value</entry>
                  </row>
              </thead>
              <tbody>
                  <row>
                      <entry><literal>spring.hadoop.fsUri</literal></entry>
                      <entry>Yes</entry>
                      <entry>String</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.hadoop.resourceManagerAddress</literal></entry>
                      <entry>No</entry>
                      <entry>String</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.hadoop.resourceManagerSchedulerAddress</literal></entry>
                      <entry>No</entry>
                      <entry>String</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.hadoop.resourceManagerHost</literal></entry>
                      <entry>No</entry>
                      <entry>String</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.hadoop.resourceManagerPort</literal></entry>
                      <entry>No</entry>
                      <entry>Integer</entry>
                      <entry>8032</entry>
                  </row>
                  <row>
                      <entry><literal>spring.hadoop.resourceManagerSchedulerPort</literal></entry>
                      <entry>No</entry>
                      <entry>Integer</entry>
                      <entry>8030</entry>
                  </row>
                  <row>
                      <entry><literal>spring.hadoop.resources</literal></entry>
                      <entry>No</entry>
                      <entry>List</entry>
                      <entry>null</entry>
                  </row>
              </tbody>
          </tgroup>
      </table>

      <variablelist>
          <varlistentry><term><filename>spring.hadoop.fsUri</filename></term>
              <listitem><para>
              A hdfs file system uri for a namenode.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.hadoop.resourceManagerAddress</filename></term>
              <listitem><para>
              Address of a YARN resource manager.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.hadoop.resourceManagerSchedulerAddress</filename></term>
              <listitem><para>
              Address of a YARN resource manager scheduler.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.hadoop.resourceManagerHost</filename></term>
              <listitem><para>
              Hostname of a YARN resource manager.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.hadoop.resourceManagerPort</filename></term>
              <listitem><para>
              Port of a YARN resource manager.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.hadoop.resourceManagerSchedulerPort</filename></term>
              <listitem><para>
              Port of a YARN resource manager scheduler. This property is only
              needed for an application master.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.hadoop.resources</filename></term>
              <listitem><para>
              List of Spring resource locations to be initialized in Hadoop configuration.
              These resources should be in Hadoop's own site xml format and location
              format can be anything Spring supports. For example,
              <emphasis>classpath:/myentry.xml</emphasis> from a classpath or
              <emphasis>file:/myentry.xml</emphasis> from a file system.
              </para></listitem>
          </varlistentry>
      </variablelist>

      <table id="yarn:boot:configpropsspringyarn" pgwide="1" align="center">
          <title><literal>spring.yarn</literal> configuration properties</title>
          <tgroup cols="4">
              <colspec colname="c1" colwidth="2*" align="left"/>
              <colspec colname="c2" colwidth="1*"/>
              <colspec colname="c3" colwidth="1*"/>
              <colspec colname="c4" colwidth="1*"/>
              <thead>
                  <row>
                      <entry>Property Name</entry>
                      <entry>Required</entry>
                      <entry>Type</entry>
                      <entry>Default Value</entry>
                  </row>
              </thead>
              <tbody>
                  <row>
                      <entry><literal>spring.yarn.applicationDir</literal></entry>
                      <entry>No</entry>
                      <entry>String</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.applicationBaseDir</literal></entry>
                      <entry>No</entry>
                      <entry>String</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.applicationVersion</literal></entry>
                      <entry>No</entry>
                      <entry>String</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.stagingDir</literal></entry>
                      <entry>No</entry>
                      <entry>String</entry>
                      <entry>/spring/staging</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.appName</literal></entry>
                      <entry>No</entry>
                      <entry>String</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.appType</literal></entry>
                      <entry>No</entry>
                      <entry>String</entry>
                      <entry>YARN</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.siteYarnAppClasspath</literal></entry>
                      <entry>No</entry>
                      <entry>String</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.siteMapreduceAppClasspath</literal></entry>
                      <entry>No</entry>
                      <entry>String</entry>
                      <entry>null</entry>
                  </row>
              </tbody>
          </tgroup>
      </table>

      <variablelist>
          <varlistentry><term><filename>spring.yarn.applicationDir</filename></term>
              <listitem><para>
              An application home directory in hdfs. If client copies
              files into a hdfs during an application submission, files will
              end up in this directory. If this property is omitted, a staging
              directory will be used instead.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.applicationBaseDir</filename></term>
              <listitem><para>
              An applications base directory where build-in application
              deployment functionality would create a new application instance.
              For a normal application submit operation, this is not needed.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.applicationVersion</filename></term>
              <listitem><para>
              An application version identifier used together with
              <literal>applicationBaseDir</literal> in deployment scenarios where
              <literal>applicationDir</literal> cannot be hard coded.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.stagingDir</filename></term>
              <listitem><para>
              A global staging base directory in hdfs.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.appName</filename></term>
              <listitem><para>
              Defines a registered application name visible from a YARN
              resource manager.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.appType</filename></term>
              <listitem><para>
              Defines a registered application type used in YARN resource manager.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.siteYarnAppClasspath</filename></term>
              <listitem><para>
              Defines a default base YARN application classpath entries.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.siteMapreduceAppClasspath</filename></term>
              <listitem><para>
              Defines a default base MR application classpath entries.
              </para></listitem>
          </varlistentry>
      </variablelist>


      <table id="yarn:boot:configpropsspringyarnappmaster" pgwide="1" align="center">
          <title><literal>spring.yarn.appmaster</literal> configuration properties</title>
          <tgroup cols="4">
              <colspec colname="c1" colwidth="2*" align="left"/>
              <colspec colname="c2" colwidth="1*"/>
              <colspec colname="c3" colwidth="1*"/>
              <colspec colname="c4" colwidth="1*"/>
              <thead>
                  <row>
                      <entry>Property Name</entry>
                      <entry>Required</entry>
                      <entry>Type</entry>
                      <entry>Default Value</entry>
                  </row>
              </thead>
              <tbody>
                  <row>
                      <entry><literal>spring.yarn.appmaster.appmasterClass</literal></entry>
                      <entry>No</entry>
                      <entry>Class</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.appmaster.containerCount</literal></entry>
                      <entry>No</entry>
                      <entry>Integer</entry>
                      <entry>1</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.appmaster.keepContextAlive</literal></entry>
                      <entry>No</entry>
                      <entry>Boolean</entry>
                      <entry>true</entry>
                  </row>
              </tbody>
          </tgroup>
      </table>

      <variablelist>
          <varlistentry><term><filename>spring.yarn.appmaster.appmasterClass</filename></term>
              <listitem><para>
              Fully qualified classname which auto-configuration can automatically
              instantiate as a custom application master.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.appmaster.containerCount</filename></term>
              <listitem><para>
              Property which is automatically kept in configuration as a hint which
              an application master can choose to use when determing how many
              containers should be launched.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.appmaster.keepContextAlive</filename></term>
              <listitem><para>
              Setting for an application master runner to stop main thread to wait
              a latch before continuing. This is needed in cases where main thread
              needs to wait event from other threads to be able to exit.
              </para></listitem>
          </varlistentry>
      </variablelist>

      <table id="yarn:boot:configpropsspringyarnappmasterlaunchcontext" pgwide="1" align="center">
          <title><literal>spring.yarn.appmaster.launchcontext</literal> configuration properties</title>
          <tgroup cols="4">
              <colspec colname="c1" colwidth="2*" align="left"/>
              <colspec colname="c2" colwidth="1*"/>
              <colspec colname="c3" colwidth="1*"/>
              <colspec colname="c4" colwidth="1*"/>
              <thead>
                  <row>
                      <entry>Property Name</entry>
                      <entry>Required</entry>
                      <entry>Type</entry>
                      <entry>Default Value</entry>
                  </row>
              </thead>
              <tbody>
                  <row>
                      <entry><literal>spring.yarn.appmaster.launchcontext.archiveFile</literal></entry>
                      <entry>No</entry>
                      <entry>String</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.appmaster.launchcontext.runnerClass</literal></entry>
                      <entry>No</entry>
                      <entry>Class</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.appmaster.launchcontext.options</literal></entry>
                      <entry>No</entry>
                      <entry>List</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.appmaster.launchcontext.arguments</literal></entry>
                      <entry>No</entry>
                      <entry>Map</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.appmaster.launchcontext.containerAppClasspath</literal></entry>
                      <entry>No</entry>
                      <entry>List</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.appmaster.launchcontext.pathSeparator</literal></entry>
                      <entry>No</entry>
                      <entry>String</entry>
                      <entry>:</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.appmaster.launchcontext.includeBaseDirectory</literal></entry>
                      <entry>No</entry>
                      <entry>Boolean</entry>
                      <entry>true</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.appmaster.launchcontext.useYarnAppClasspath</literal></entry>
                      <entry>No</entry>
                      <entry>Boolean</entry>
                      <entry>true</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.appmaster.launchcontext.useMapreduceAppClasspath</literal></entry>
                      <entry>No</entry>
                      <entry>Boolean</entry>
                      <entry>true</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.appmaster.launchcontext.includeSystemEnv</literal></entry>
                      <entry>No</entry>
                      <entry>Boolean</entry>
                      <entry>true</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.appmaster.launchcontext.locality</literal></entry>
                      <entry>No</entry>
                      <entry>Boolean</entry>
                      <entry>false</entry>
                </row>
              </tbody>
          </tgroup>
      </table>

      <variablelist>
          <varlistentry><term><filename>spring.yarn.appmaster.launchcontext.archiveFile</filename></term>
              <listitem><para>
              Indicates that a container main file is treated as executable jar or exploded zip.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.appmaster.launchcontext.runnerClass</filename></term>
              <listitem><para>
              Indicates a fully qualified class name for a container runner.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.appmaster.launchcontext.options</filename></term>
              <listitem><para>
              JVM system options.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.appmaster.launchcontext.arguments</filename></term>
              <listitem><para>
              Application arguments.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.appmaster.launchcontext.containerAppClasspath</filename></term>
              <listitem><para>
              Additional classpath entries.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.appmaster.launchcontext.pathSeparator</filename></term>
              <listitem><para>
              Separator in a classpath.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.appmaster.launchcontext.includeBaseDirectory</filename></term>
              <listitem><para>
              If base directory should be added in a classpath.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.appmaster.launchcontext.useYarnAppClasspath</filename></term>
              <listitem><para>
              If default yarn application classpath should be added.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.appmaster.launchcontext.useMapreduceAppClasspath</filename></term>
              <listitem><para>
              If default mr application classpath should be added.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.appmaster.launchcontext.includeSystemEnv</filename></term>
              <listitem><para>
              If system environment variables are added to a container environment.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.appmaster.launchcontext.locality</filename></term>
              <listitem><para>
              If set to true indicates that resources are not relaxed.
              </para></listitem>
          </varlistentry>
      </variablelist>

      <table id="yarn:boot:configpropsspringyarnappmasterlocalizer" pgwide="1" align="center">
          <title><literal>spring.yarn.appmaster.localizer</literal> configuration properties</title>
          <tgroup cols="4">
              <colspec colname="c1" colwidth="2*" align="left"/>
              <colspec colname="c2" colwidth="1*"/>
              <colspec colname="c3" colwidth="1*"/>
              <colspec colname="c4" colwidth="1*"/>
              <thead>
                  <row>
                      <entry>Property Name</entry>
                      <entry>Required</entry>
                      <entry>Type</entry>
                      <entry>Default Value</entry>
                  </row>
              </thead>
              <tbody>
                  <row>
                      <entry><literal>spring.yarn.appmaster.localizer.patterns</literal></entry>
                      <entry>No</entry>
                      <entry>List</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.appmaster.localizer.zipPattern</literal></entry>
                      <entry>No</entry>
                      <entry>String</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.appmaster.localizer.propertiesNames</literal></entry>
                      <entry>No</entry>
                      <entry>List</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.appmaster.localizer.propertiesSuffixes</literal></entry>
                      <entry>No</entry>
                      <entry>List</entry>
                      <entry>null</entry>
                  </row>
              </tbody>
          </tgroup>
      </table>

      <variablelist>
          <varlistentry><term><filename>spring.yarn.appmaster.localizer.patterns</filename></term>
              <listitem><para>
              A simple patterns to choose localized files.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.appmaster.localizer.zipPattern</filename></term>
              <listitem><para>
              A simple pattern to mark a file as archive to be exploded.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.appmaster.localizer.propertiesNames</filename></term>
              <listitem><para>
              Base name of a configuration files.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.appmaster.localizer.propertiesSuffixes</filename></term>
              <listitem><para>
              Suffixes for a configuration files.
              </para></listitem>
          </varlistentry>
      </variablelist>

      <table id="yarn:boot:configpropsspringyarnappmasterresource" pgwide="1" align="center">
          <title><literal>spring.yarn.appmaster.resource</literal> configuration properties</title>
          <tgroup cols="4">
              <colspec colname="c1" colwidth="2*" align="left"/>
              <colspec colname="c2" colwidth="1*"/>
              <colspec colname="c3" colwidth="1*"/>
              <colspec colname="c4" colwidth="1*"/>
              <thead>
                  <row>
                      <entry>Property Name</entry>
                      <entry>Required</entry>
                      <entry>Type</entry>
                      <entry>Default Value</entry>
                  </row>
              </thead>
              <tbody>
                  <row>
                      <entry><literal>spring.yarn.appmaster.resource.priority</literal></entry>
                      <entry>No</entry>
                      <entry>String</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.appmaster.resource.memory</literal></entry>
                      <entry>No</entry>
                      <entry>String</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.appmaster.resource.virtualCores</literal></entry>
                      <entry>No</entry>
                      <entry>String</entry>
                      <entry>null</entry>
                  </row>
              </tbody>
          </tgroup>
      </table>

      <variablelist>
          <varlistentry><term><filename>spring.yarn.appmaster.resource.priority</filename></term>
              <listitem><para>
              Container priority.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.appmaster.resource.memory</filename></term>
              <listitem><para>
              Container memory allocation.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.appmaster.resource.virtualCores</filename></term>
              <listitem><para>
              Container cpu allocation.
              </para></listitem>
          </varlistentry>
      </variablelist>



      <table id="yarn:boot:configpropsspringyarnclient" pgwide="1" align="center">
          <title><literal>spring.yarn.client</literal> configuration properties</title>
          <tgroup cols="4">
              <colspec colname="c1" colwidth="2*" align="left"/>
              <colspec colname="c2" colwidth="1*"/>
              <colspec colname="c3" colwidth="1*"/>
              <colspec colname="c4" colwidth="1*"/>
              <thead>
                  <row>
                      <entry>Property Name</entry>
                      <entry>Required</entry>
                      <entry>Type</entry>
                      <entry>Default Value</entry>
                  </row>
              </thead>
              <tbody>
                  <row>
                      <entry><literal>spring.yarn.client.files</literal></entry>
                      <entry>No</entry>
                      <entry>List</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.client.priority</literal></entry>
                      <entry>No</entry>
                      <entry>Integer</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.client.queue</literal></entry>
                      <entry>No</entry>
                      <entry>String</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.client.clientClass</literal></entry>
                      <entry>No</entry>
                      <entry>Class</entry>
                      <entry>null</entry>
                  </row>
              </tbody>
          </tgroup>
      </table>

      <variablelist>
          <varlistentry><term><filename>spring.yarn.client.files</filename></term>
              <listitem><para>
              Files to copy into hdfs during application submission.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.client.priority</filename></term>
              <listitem><para>
              Application priority.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.client.queue</filename></term>
              <listitem><para>
              Application submission queue.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.client.clientClass</filename></term>
              <listitem><para>
              Fully qualified classname which auto-configuration can automatically
              instantiate as a custom client.
              </para></listitem>
          </varlistentry>
      </variablelist>

      <table id="yarn:boot:configpropsspringyarnclientlaunchcontext" pgwide="1" align="center">
          <title><literal>spring.yarn.client.launchcontext</literal> configuration properties</title>
          <tgroup cols="4">
              <colspec colname="c1" colwidth="2*" align="left"/>
              <colspec colname="c2" colwidth="1*"/>
              <colspec colname="c3" colwidth="1*"/>
              <colspec colname="c4" colwidth="1*"/>
              <thead>
                  <row>
                      <entry>Property Name</entry>
                      <entry>Required</entry>
                      <entry>Type</entry>
                      <entry>Default Value</entry>
                  </row>
              </thead>
              <tbody>
                  <row>
                      <entry><literal>spring.yarn.client.launchcontext.archiveFile</literal></entry>
                      <entry>No</entry>
                      <entry>String</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.client.launchcontext.runnerClass</literal></entry>
                      <entry>No</entry>
                      <entry>Class</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.client.launchcontext.options</literal></entry>
                      <entry>No</entry>
                      <entry>List</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.client.launchcontext.arguments</literal></entry>
                      <entry>No</entry>
                      <entry>Map</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.client.launchcontext.containerAppClasspath</literal></entry>
                      <entry>No</entry>
                      <entry>List</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.client.launchcontext.pathSeparator</literal></entry>
                      <entry>No</entry>
                      <entry>String</entry>
                      <entry>:</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.client.launchcontext.includeBaseDirectory</literal></entry>
                      <entry>No</entry>
                      <entry>Boolean</entry>
                      <entry>true</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.client.launchcontext.useYarnAppClasspath</literal></entry>
                      <entry>No</entry>
                      <entry>Boolean</entry>
                      <entry>true</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.client.launchcontext.useMapreduceAppClasspath</literal></entry>
                      <entry>No</entry>
                      <entry>Boolean</entry>
                      <entry>true</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.client.launchcontext.includeSystemEnv</literal></entry>
                      <entry>No</entry>
                      <entry>Boolean</entry>
                      <entry>true</entry>
                  </row>
              </tbody>
          </tgroup>
      </table>

      <variablelist>
          <varlistentry><term><filename>spring.yarn.client.launchcontext.archiveFile</filename></term>
              <listitem><para>
              Indicates that a container main file is treated as executable jar or exploded zip.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.client.launchcontext.runnerClass</filename></term>
              <listitem><para>
              Indicates a fully qualified class name for a container runner.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.client.launchcontext.options</filename></term>
              <listitem><para>
              JVM system options.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.client.launchcontext.arguments</filename></term>
              <listitem><para>
              Application arguments.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.client.launchcontext.containerAppClasspath</filename></term>
              <listitem><para>
              Additional classpath entries.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.client.launchcontext.pathSeparator</filename></term>
              <listitem><para>
              Separator in a classpath.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.client.launchcontext.includeBaseDirectory</filename></term>
              <listitem><para>
              If base directory should be added in a classpath.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.client.launchcontext.useYarnAppClasspath</filename></term>
              <listitem><para>
              If default yarn application classpath should be added.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.client.launchcontext.useMapreduceAppClasspath</filename></term>
              <listitem><para>
              If default mr application classpath should be added.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.client.launchcontext.includeSystemEnv</filename></term>
              <listitem><para>
              If system environment variables are added to a container environment.
              </para></listitem>
          </varlistentry>
      </variablelist>

      <table id="yarn:boot:configpropsspringyarnclientlocalizer" pgwide="1" align="center">
          <title><literal>spring.yarn.client.localizer</literal> configuration properties</title>
          <tgroup cols="4">
              <colspec colname="c1" colwidth="2*" align="left"/>
              <colspec colname="c2" colwidth="1*"/>
              <colspec colname="c3" colwidth="1*"/>
              <colspec colname="c4" colwidth="1*"/>
              <thead>
                  <row>
                      <entry>Property Name</entry>
                      <entry>Required</entry>
                      <entry>Type</entry>
                      <entry>Default Value</entry>
                  </row>
              </thead>
              <tbody>
                  <row>
                      <entry><literal>spring.yarn.client.localizer.patterns</literal></entry>
                      <entry>No</entry>
                      <entry>List</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.client.localizer.zipPattern</literal></entry>
                      <entry>No</entry>
                      <entry>String</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.client.localizer.propertiesNames</literal></entry>
                      <entry>No</entry>
                      <entry>List</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.client.localizer.propertiesSuffixes</literal></entry>
                      <entry>No</entry>
                      <entry>List</entry>
                      <entry>null</entry>
                  </row>
              </tbody>
          </tgroup>
      </table>

      <variablelist>
          <varlistentry><term><filename>spring.yarn.client.localizer.patterns</filename></term>
              <listitem><para>
              A simple patterns to choose localized files.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.client.localizer.zipPattern</filename></term>
              <listitem><para>
              A simple pattern to mark a file as archive to be exploded.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.client.localizer.propertiesNames</filename></term>
              <listitem><para>
              Base name of a configuration files.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.client.localizer.propertiesSuffixes</filename></term>
              <listitem><para>
              Suffixes for a configuration files.
              </para></listitem>
          </varlistentry>
      </variablelist>

      <table id="yarn:boot:configpropsspringyarnclientresource" pgwide="1" align="center">
          <title><literal>spring.yarn.client.resource</literal> configuration properties</title>
          <tgroup cols="4">
              <colspec colname="c1" colwidth="2*" align="left"/>
              <colspec colname="c2" colwidth="1*"/>
              <colspec colname="c3" colwidth="1*"/>
              <colspec colname="c4" colwidth="1*"/>
              <thead>
                  <row>
                      <entry>Property Name</entry>
                      <entry>Required</entry>
                      <entry>Type</entry>
                      <entry>Default Value</entry>
                  </row>
              </thead>
              <tbody>
                  <row>
                      <entry><literal>spring.yarn.client.resource.memory</literal></entry>
                      <entry>No</entry>
                      <entry>String</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.client.resource.virtualCores</literal></entry>
                      <entry>No</entry>
                      <entry>String</entry>
                      <entry>null</entry>
                  </row>
              </tbody>
          </tgroup>
      </table>

      <variablelist>
          <varlistentry><term><filename>spring.yarn.client.resource.memory</filename></term>
              <listitem><para>
              Application master memory allocation.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.client.resource.virtualCores</filename></term>
              <listitem><para>
              Application master cpu allocation.
              </para></listitem>
          </varlistentry>
      </variablelist>


      <table id="yarn:boot:configpropsspringyarncontainer" pgwide="1" align="center">
          <title><literal>spring.yarn.container</literal> configuration properties</title>
          <tgroup cols="4">
              <colspec colname="c1" colwidth="2*" align="left"/>
              <colspec colname="c2" colwidth="1*"/>
              <colspec colname="c3" colwidth="1*"/>
              <colspec colname="c4" colwidth="1*"/>
              <thead>
                  <row>
                      <entry>Property Name</entry>
                      <entry>Required</entry>
                      <entry>Type</entry>
                      <entry>Default Value</entry>
                  </row>
              </thead>
              <tbody>
                  <row>
                      <entry><literal>spring.yarn.container.keepContextAlive</literal></entry>
                      <entry>No</entry>
                      <entry>Boolean</entry>
                      <entry>true</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.container.containerClass</literal></entry>
                      <entry>No</entry>
                      <entry>Class</entry>
                      <entry>null</entry>
                  </row>
              </tbody>
          </tgroup>
      </table>

      <variablelist>
          <varlistentry><term><filename>spring.yarn.container.keepContextAlive</filename></term>
              <listitem><para>
              Setting for an application container runner to stop main thread to wait
              a latch before continuing. This is needed in cases where main thread
              needs to wait event from other threads to be able to exit.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.container.containerClass</filename></term>
              <listitem><para>
              Fully qualified classname which auto-configuration can automatically
              instantiate as a custom container.
              </para></listitem>
          </varlistentry>
      </variablelist>





      <table id="yarn:boot:configpropsspringyarnbatch" pgwide="1" align="center">
          <title><literal>spring.yarn.batch</literal> configuration properties</title>
          <tgroup cols="4">
              <colspec colname="c1" colwidth="2*" align="left"/>
              <colspec colname="c2" colwidth="1*"/>
              <colspec colname="c3" colwidth="1*"/>
              <colspec colname="c4" colwidth="1*"/>
              <thead>
                  <row>
                      <entry>Property Name</entry>
                      <entry>Required</entry>
                      <entry>Type</entry>
                      <entry>Default Value</entry>
                  </row>
              </thead>
              <tbody>
                  <row>
                      <entry><literal>spring.yarn.batch.name</literal></entry>
                      <entry>No</entry>
                      <entry>String</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.batch.enabled</literal></entry>
                      <entry>No</entry>
                      <entry>Boolean</entry>
                      <entry>false</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.batch.jobs</literal></entry>
                      <entry>No</entry>
                      <entry>List</entry>
                      <entry>null</entry>
                  </row>
              </tbody>
          </tgroup>
      </table>

      <variablelist>
          <varlistentry><term><filename>spring.yarn.batch.name</filename></term>
              <listitem><para>
              Comma-delimited list of search patterns to find jobs to run
              defined either locally in application context or in job registry.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.batch.enabled</filename></term>
              <listitem><para>
              Indicates if batch processing on yarn is enabled.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.batch.jobs</filename></term>
              <listitem><para>
              Indicates a list of individual configuration properties for jobs.
              </para></listitem>
          </varlistentry>
      </variablelist>

      <table id="yarn:boot:configpropsspringyarnbatchjobs" pgwide="1" align="center">
          <title><literal>spring.yarn</literal> configuration properties</title>
          <tgroup cols="4">
              <colspec colname="c1" colwidth="2*" align="left"/>
              <colspec colname="c2" colwidth="1*"/>
              <colspec colname="c3" colwidth="1*"/>
              <colspec colname="c4" colwidth="1*"/>
              <thead>
                  <row>
                      <entry>Property Name</entry>
                      <entry>Required</entry>
                      <entry>Type</entry>
                      <entry>Default Value</entry>
                  </row>
              </thead>
              <tbody>
                  <row>
                      <entry><literal>spring.yarn.batch.jobs.name</literal></entry>
                      <entry>No</entry>
                      <entry>String</entry>
                      <entry>null</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.batch.jobs.enabled</literal></entry>
                      <entry>No</entry>
                      <entry>Boolean</entry>
                      <entry>false</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.batch.jobs.next</literal></entry>
                      <entry>No</entry>
                      <entry>Boolean</entry>
                      <entry>false</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.batch.jobs.failNext</literal></entry>
                      <entry>No</entry>
                      <entry>Boolean</entry>
                      <entry>false</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.batch.jobs.restart</literal></entry>
                      <entry>No</entry>
                      <entry>Boolean</entry>
                      <entry>false</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.batch.jobs.failRestart</literal></entry>
                      <entry>No</entry>
                      <entry>Boolean</entry>
                      <entry>false</entry>
                  </row>
                  <row>
                      <entry><literal>spring.yarn.batch.jobs.parameters</literal></entry>
                      <entry>No</entry>
                      <entry>String</entry>
                      <entry>null</entry>
                  </row>
              </tbody>
          </tgroup>
      </table>

      <variablelist><title>Descriptions</title>
          <varlistentry><term><filename>spring.yarn.batch.jobs.name</filename></term>
              <listitem><para>
              Name of a job to configure.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.batch.jobs.enabled</filename></term>
              <listitem><para>
              Indicates if job is enabled.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.batch.jobs.next</filename></term>
              <listitem><para>
              Indicates if job parameters incrementer is used to prepare a job for next run.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.batch.jobs.failNext</filename></term>
              <listitem><para>
              Indicates if job execution should fail if job cannot be prepared for next execution.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.batch.jobs.restart</filename></term>
              <listitem><para>
              Indicates of job should be restarted.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.batch.jobs.failRestart</filename></term>
              <listitem><para>
              Indicates if job execution should fail if job cannot be restarted.
              </para></listitem>
          </varlistentry>
          <varlistentry><term><filename>spring.yarn.batch.jobs.parameters</filename></term>
              <listitem><para>
              Defines a Map of additional job parameters. Keys and values are in normal
              format supported by Batch.
              </para></listitem>
          </varlistentry>
      </variablelist>

    </section>

    <section id="yarn:pushsubmitmodel">

      <title>Controlling Applications</title>

      <para>We've already talked about how resources are localized into a running container.
      These resources are always localized from a HDFS file system which effectively means that the whole
      process of getting application files into a newly launched YARN application is a two phase process;
      firstly files are copied into HDFS and secondly files are localized from a HDFS.</para>

      <para>When application instance is submitted into YARN, there are two ways how these application
      files can be handled. First which is the most obvious is to just copy all the necessary files into
      a known location in HDFS and then instruct YARN to localize files from there. Second method is to
      split this into two different stages, first install application files into HDFS and then submit application
      from there. At first there seem to be no difference with these two ways to handle application
      deployment. However if files are always copied into HDFS when application is submitted, you
      need a physical access to those files. This may not always be possible so it's easier if
      you have a change to prepare these files by first installing application into HDFS
      and then just send a submit command to a YARN resource manager.</para>

      <para>To ease a process of handling a full application life cycle, few utility classes exist
      which are meant to be used with Spring Boot. These classes are considered to be a foundational
      Boot application classes, not a ready packaged Boot executable jars. Instead you would use
      these from your own application whether that application is a Boot or other Spring based application.</para>

      <section>
        <title>Generic Usage</title>

        <para>Internally these applications are executed using a <classname>SpringApplicationBuilder</classname>
        and a dedicated <emphasis>Spring Application Context</emphasis>. This allows to isolate Boot
        application instance from your current context if you have one. One fundamental idea in these
        applications is to make it possible to work with Spring profiles and Boot configuration properties.
        If your existing application is already using profiles and configuration properties,
        simply launching a new Boot would most likely derive those settings automatically
        which is something what you may not want.</para>

        <para><classname>AbstractClientApplication</classname> which all these built-in
        applications are based on contains methods to work with <emphasis>Spring profiles</emphasis>
        and additional configuration properties.</para>

        <para>Let's go through all this using an example:</para>
      </section>

      <section>
        <title>Using Configuration Properties</title>

          <para>Below sample is pretty much a similar from all other examples except of two settings,
          <literal>applicationBaseDir</literal> and <literal>clientClass</literal>. Property
          <literal>applicationBaseDir</literal> defines where in HDFS a new app will be installed.
          <classname>DefaultApplicationYarnClient</classname> defined using <literal>clientClass</literal>
          adds better functionality to guard against starting app which doesn't exist or
          not overwriting existing apps in HDFS.</para>

          <programlisting language="java"><![CDATA[spring:
  hadoop:
    fsUri: hdfs://localhost:8020
    resourceManagerHost: localhost
  yarn:
    appType: GS
    appName: gs-yarn-appmodel
    applicationBaseDir: /app/
    applicationDir: /app/gs-yarn-appmodel/
    client:
      clientClass: org.springframework.yarn.client.DefaultApplicationYarnClient
      files:
        - "file:build/libs/gs-yarn-appmodel-container-0.1.0.jar"
        - "file:build/libs/gs-yarn-appmodel-appmaster-0.1.0.jar"
      launchcontext:
        archiveFile: gs-yarn-appmodel-appmaster-0.1.0.jar
    appmaster:
      containerCount: 1
      launchcontext:
        archiveFile: gs-yarn-appmodel-container-0.1.0.jar]]></programlisting>
      </section>

      <section>
        <title>Using YarnPushApplication</title>

          <para>YarnPushApplication is used to push your application into HDFS.</para>

          <programlisting language="java"><![CDATA[public void doInstall() {
  YarnPushApplication app = new YarnPushApplication();
  app.applicationVersion("version1");
  Properties instanceProperties = new Properties();
  instanceProperties.setProperty("spring.yarn.applicationVersion", "version1");
  app.configFile("application.properties", instanceProperties);
  app.run();
}]]></programlisting>

          <para>In above example we simply created a <classname>YarnPushApplication</classname>,
          set its <literal>applicationVersion</literal> and executed a run method. We also instructed
          <classname>YarnPushApplication</classname> to write used <literal>applicationVersion</literal>
          into a configuration file named <emphasis>application.properties</emphasis> so that
          it'd be available to an application itself.</para>

      </section>

      <section>
        <title>Using YarnSubmitApplication</title>

          <para>YarnSubmitApplication is used to submit your application from HDFS into YARN.</para>

          <programlisting language="java"><![CDATA[public void doSubmit() {
  YarnSubmitApplication app = new YarnSubmitApplication();
  app.applicationVersion("version1");
  ApplicationId applicationId = app.run();
}]]></programlisting>

          <para>In above example we simply created a <classname>YarnSubmitApplication</classname>,
          set its <literal>applicationVersion</literal> and executed a run method.</para>

      </section>

      <section>
        <title>Using YarnInfoApplication</title>

          <para>YarnInfoApplication is used to query application info from a YARN Resource Manager and HDFS.</para>

          <programlisting language="java"><![CDATA[public void doListPushed() {
  YarnInfoApplication app = new YarnInfoApplication();
  Properties appProperties = new Properties();
  appProperties.setProperty("spring.yarn.internal.YarnInfoApplication.operation", "PUSHED");
  app.appProperties(appProperties);
  String info = app.run();
  System.out.println(info);
}

public void doListSubmitted() {
  YarnInfoApplication app = new YarnInfoApplication();
  Properties appProperties = new Properties();
  appProperties.setProperty("spring.yarn.internal.YarnInfoApplication.operation", "SUBMITTED");
  appProperties.setProperty("spring.yarn.internal.YarnInfoApplication.verbose", "true");
  appProperties.setProperty("spring.yarn.internal.YarnInfoApplication.type", "GS");
  app.appProperties(appProperties);
  String info = app.run();
  System.out.println(info);
}]]></programlisting>

          <para>In above example we simply created a <classname>YarnInfoApplication</classname>,
          and used it to list installed and running applications. By adding
          <literal>appProperties</literal> will make Boot to pick these properties
          after every other source of configuration properties but still allows to pass
          command-line options to override everything which is a normal way in Boot.</para>

      </section>

      <section>
        <title>Using YarnKillApplication</title>

          <para>YarnKillApplication is used to kill running application instances.</para>

          <programlisting language="java"><![CDATA[public void doKill() {
  YarnKillApplication app = new YarnKillApplication();
  Properties appProperties = new Properties();
  appProperties.setProperty("spring.yarn.internal.YarnKillApplication.applicationId", "application_1395058039949_0052");
  app.appProperties(appProperties);
  String info = app.run();
  System.out.println(info);
}]]></programlisting>

          <para>In above example we simply created a <classname>YarnKillApplication</classname>,
          and used it to send a application kill request into a YARN resource manager.</para>

      </section>

    </section>

  </section>

</chapter>
